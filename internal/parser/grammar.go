// Code generated by pigeon; DO NOT EDIT.

package parser

// NB: including all the imports make the parser generator run a bit more quickly.
import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/playbymail/ottomap/internal/compass"
	"github.com/playbymail/ottomap/internal/direction"
	"github.com/playbymail/ottomap/internal/edges"
	"github.com/playbymail/ottomap/internal/items"
	"github.com/playbymail/ottomap/internal/resources"
	"github.com/playbymail/ottomap/internal/terrain"
	"github.com/playbymail/ottomap/internal/unit_movement"
	"github.com/playbymail/ottomap/internal/winds"
)

type Date_t struct {
	Year  int
	Month int
	Day   int
}

func (d Date_t) IsZero() bool {
	return d == Date_t{}
}

type TurnInfo_t struct {
	CurrentTurn Date_t
	NextTurn    Date_t
}

func bdup(src []byte) []byte {
	dst := make([]byte, len(src))
	copy(dst, src)
	return dst
}

func toAnySlice(v any) []any {
	if v == nil {
		return nil
	}
	return v.([]any)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Noop",
			pos:  position{line: 59, col: 1, offset: 1032},
			expr: &actionExpr{
				pos: position{line: 59, col: 9, offset: 1040},
				run: (*parser).callonNoop1,
				expr: &ruleRefExpr{
					pos:  position{line: 59, col: 9, offset: 1040},
					name: "EOF",
				},
			},
		},
		{
			name: "AdminNote",
			pos:  position{line: 63, col: 1, offset: 1070},
			expr: &actionExpr{
				pos: position{line: 63, col: 14, offset: 1083},
				run: (*parser).callonAdminNote1,
				expr: &litMatcher{
					pos:        position{line: 63, col: 14, offset: 1083},
					val:        "Map Testing",
					ignoreCase: false,
					want:       "\"Map Testing\"",
				},
			},
		},
		{
			name: "MiscNote",
			pos:  position{line: 67, col: 1, offset: 1123},
			expr: &actionExpr{
				pos: position{line: 67, col: 13, offset: 1135},
				run: (*parser).callonMiscNote1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 67, col: 13, offset: 1135},
					expr: &seqExpr{
						pos: position{line: 67, col: 14, offset: 1136},
						exprs: []any{
							&notExpr{
								pos: position{line: 67, col: 14, offset: 1136},
								expr: &charClassMatcher{
									pos:        position{line: 67, col: 15, offset: 1137},
									val:        "[\\n\\r,]",
									chars:      []rune{'\n', '\r', ','},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&anyMatcher{
								line: 67, col: 23, offset: 1145,
							},
						},
					},
				},
			},
		},
		{
			name: "CrowsNestObservation",
			pos:  position{line: 72, col: 1, offset: 1231},
			expr: &actionExpr{
				pos: position{line: 72, col: 25, offset: 1255},
				run: (*parser).callonCrowsNestObservation1,
				expr: &seqExpr{
					pos: position{line: 72, col: 25, offset: 1255},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 72, col: 25, offset: 1255},
							label: "cs",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 28, offset: 1258},
								name: "CROWSIGHTING",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 41, offset: 1271},
							name: "SP",
						},
						&litMatcher{
							pos:        position{line: 72, col: 44, offset: 1274},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 48, offset: 1278},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 51, offset: 1281},
							label: "cp",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 54, offset: 1284},
								name: "COMPASSPOINT",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 67, offset: 1297},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DeckObservation",
			pos:  position{line: 79, col: 1, offset: 1419},
			expr: &actionExpr{
				pos: position{line: 79, col: 20, offset: 1438},
				run: (*parser).callonDeckObservation1,
				expr: &seqExpr{
					pos: position{line: 79, col: 20, offset: 1438},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 79, col: 20, offset: 1438},
							label: "d",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 22, offset: 1440},
								name: "DIRECTION",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 79, col: 32, offset: 1450},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 79, col: 35, offset: 1453},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 37, offset: 1455},
								name: "TERRAIN_CODE",
							},
						},
					},
				},
			},
		},
		{
			name: "EdgeType",
			pos:  position{line: 86, col: 1, offset: 1592},
			expr: &choiceExpr{
				pos: position{line: 86, col: 13, offset: 1604},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 86, col: 13, offset: 1604},
						run: (*parser).callonEdgeType2,
						expr: &litMatcher{
							pos:        position{line: 86, col: 13, offset: 1604},
							val:        "Canal",
							ignoreCase: false,
							want:       "\"Canal\"",
						},
					},
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 1646},
						run: (*parser).callonEdgeType4,
						expr: &litMatcher{
							pos:        position{line: 88, col: 5, offset: 1646},
							val:        "Ford",
							ignoreCase: false,
							want:       "\"Ford\"",
						},
					},
					&actionExpr{
						pos: position{line: 90, col: 5, offset: 1686},
						run: (*parser).callonEdgeType6,
						expr: &litMatcher{
							pos:        position{line: 90, col: 5, offset: 1686},
							val:        "Pass",
							ignoreCase: false,
							want:       "\"Pass\"",
						},
					},
					&actionExpr{
						pos: position{line: 92, col: 5, offset: 1726},
						run: (*parser).callonEdgeType8,
						expr: &litMatcher{
							pos:        position{line: 92, col: 5, offset: 1726},
							val:        "River",
							ignoreCase: false,
							want:       "\"River\"",
						},
					},
					&actionExpr{
						pos: position{line: 94, col: 5, offset: 1768},
						run: (*parser).callonEdgeType10,
						expr: &litMatcher{
							pos:        position{line: 94, col: 5, offset: 1768},
							val:        "Stone Road",
							ignoreCase: false,
							want:       "\"Stone Road\"",
						},
					},
				},
			},
		},
		{
			name: "FleetMovement",
			pos:  position{line: 98, col: 1, offset: 1818},
			expr: &actionExpr{
				pos: position{line: 98, col: 18, offset: 1835},
				run: (*parser).callonFleetMovement1,
				expr: &seqExpr{
					pos: position{line: 98, col: 18, offset: 1835},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 98, col: 18, offset: 1835},
							label: "ws",
							expr: &ruleRefExpr{
								pos:  position{line: 98, col: 21, offset: 1838},
								name: "WINDSTRENGTH",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 34, offset: 1851},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 37, offset: 1854},
							label: "d",
							expr: &ruleRefExpr{
								pos:  position{line: 98, col: 39, offset: 1856},
								name: "DIRECTION",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 49, offset: 1866},
							name: "SP",
						},
						&litMatcher{
							pos:        position{line: 98, col: 52, offset: 1869},
							val:        "Fleet Movement:",
							ignoreCase: false,
							want:       "\"Fleet Movement:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 70, offset: 1887},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 72, offset: 1889},
							label: "results",
							expr: &ruleRefExpr{
								pos:  position{line: 98, col: 80, offset: 1897},
								name: "ToEOL",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 86, offset: 1903},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 108, col: 1, offset: 2142},
			expr: &actionExpr{
				pos: position{line: 108, col: 13, offset: 2154},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 108, col: 13, offset: 2154},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 108, col: 14, offset: 2155},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 108, col: 14, offset: 2155},
									val:        "Courier",
									ignoreCase: false,
									want:       "\"Courier\"",
								},
								&litMatcher{
									pos:        position{line: 108, col: 26, offset: 2167},
									val:        "Element",
									ignoreCase: false,
									want:       "\"Element\"",
								},
								&litMatcher{
									pos:        position{line: 108, col: 38, offset: 2179},
									val:        "Fleet",
									ignoreCase: false,
									want:       "\"Fleet\"",
								},
								&litMatcher{
									pos:        position{line: 108, col: 48, offset: 2189},
									val:        "Garrison",
									ignoreCase: false,
									want:       "\"Garrison\"",
								},
								&litMatcher{
									pos:        position{line: 108, col: 61, offset: 2202},
									val:        "Tribe",
									ignoreCase: false,
									want:       "\"Tribe\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 70, offset: 2211},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 73, offset: 2214},
							label: "u",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 75, offset: 2216},
								name: "UNIT_ID",
							},
						},
						&litMatcher{
							pos:        position{line: 108, col: 83, offset: 2224},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 87, offset: 2228},
							name: "SP",
						},
						&zeroOrOneExpr{
							pos: position{line: 108, col: 90, offset: 2231},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 90, offset: 2231},
								name: "MiscNote",
							},
						},
						&litMatcher{
							pos:        position{line: 108, col: 100, offset: 2241},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 104, offset: 2245},
							name: "SP",
						},
						&litMatcher{
							pos:        position{line: 108, col: 107, offset: 2248},
							val:        "Current Hex =",
							ignoreCase: false,
							want:       "\"Current Hex =\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 123, offset: 2264},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 126, offset: 2267},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 129, offset: 2270},
								name: "COORDS",
							},
						},
						&litMatcher{
							pos:        position{line: 108, col: 136, offset: 2277},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 140, offset: 2281},
							name: "SP",
						},
						&litMatcher{
							pos:        position{line: 108, col: 143, offset: 2284},
							val:        "(Previous Hex =",
							ignoreCase: false,
							want:       "\"(Previous Hex =\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 161, offset: 2302},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 164, offset: 2305},
							label: "ph",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 167, offset: 2308},
								name: "COORDS",
							},
						},
						&litMatcher{
							pos:        position{line: 108, col: 174, offset: 2315},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 178, offset: 2319},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 180, offset: 2321},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Longhouse",
			pos:  position{line: 116, col: 1, offset: 2468},
			expr: &actionExpr{
				pos: position{line: 116, col: 14, offset: 2481},
				run: (*parser).callonLonghouse1,
				expr: &seqExpr{
					pos: position{line: 116, col: 14, offset: 2481},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 116, col: 14, offset: 2481},
							label: "szi",
							expr: &oneOrMoreExpr{
								pos: position{line: 116, col: 19, offset: 2486},
								expr: &ruleRefExpr{
									pos:  position{line: 116, col: 19, offset: 2486},
									name: "DIGIT",
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 116, col: 27, offset: 2494},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 27, offset: 2494},
								name: "SP",
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 31, offset: 2498},
							val:        "Longhouse",
							ignoreCase: false,
							want:       "\"Longhouse\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 116, col: 43, offset: 2510},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 43, offset: 2510},
								name: "SP",
							},
						},
						&labeledExpr{
							pos:   position{line: 116, col: 47, offset: 2514},
							label: "idi",
							expr: &seqExpr{
								pos: position{line: 116, col: 52, offset: 2519},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 116, col: 52, offset: 2519},
										name: "LETTER",
									},
									&oneOrMoreExpr{
										pos: position{line: 116, col: 59, offset: 2526},
										expr: &ruleRefExpr{
											pos:  position{line: 116, col: 59, offset: 2526},
											name: "DIGIT",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ObviousNeighboringTerrainCode",
			pos:  position{line: 152, col: 1, offset: 3547},
			expr: &choiceExpr{
				pos: position{line: 152, col: 34, offset: 3580},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 152, col: 34, offset: 3580},
						run: (*parser).callonObviousNeighboringTerrainCode2,
						expr: &litMatcher{
							pos:        position{line: 152, col: 34, offset: 3580},
							val:        "alps",
							ignoreCase: true,
							want:       "\"ALPS\"i",
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 3623},
						run: (*parser).callonObviousNeighboringTerrainCode4,
						expr: &litMatcher{
							pos:        position{line: 154, col: 5, offset: 3623},
							val:        "hsm",
							ignoreCase: true,
							want:       "\"HSM\"i",
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 3679},
						run: (*parser).callonObviousNeighboringTerrainCode6,
						expr: &litMatcher{
							pos:        position{line: 156, col: 5, offset: 3679},
							val:        "lcm",
							ignoreCase: true,
							want:       "\"LCM\"i",
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 3736},
						run: (*parser).callonObviousNeighboringTerrainCode8,
						expr: &litMatcher{
							pos:        position{line: 158, col: 5, offset: 3736},
							val:        "ljm",
							ignoreCase: true,
							want:       "\"LJM\"i",
						},
					},
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 3792},
						run: (*parser).callonObviousNeighboringTerrainCode10,
						expr: &litMatcher{
							pos:        position{line: 160, col: 5, offset: 3792},
							val:        "lsm",
							ignoreCase: true,
							want:       "\"LSM\"i",
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 3847},
						run: (*parser).callonObviousNeighboringTerrainCode12,
						expr: &litMatcher{
							pos:        position{line: 162, col: 5, offset: 3847},
							val:        "lvm",
							ignoreCase: true,
							want:       "\"LVM\"i",
						},
					},
					&actionExpr{
						pos: position{line: 164, col: 5, offset: 3905},
						run: (*parser).callonObviousNeighboringTerrainCode14,
						expr: &litMatcher{
							pos:        position{line: 164, col: 5, offset: 3905},
							val:        "L",
							ignoreCase: false,
							want:       "\"L\"",
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 3944},
						run: (*parser).callonObviousNeighboringTerrainCode16,
						expr: &litMatcher{
							pos:        position{line: 166, col: 5, offset: 3944},
							val:        "O",
							ignoreCase: false,
							want:       "\"O\"",
						},
					},
				},
			},
		},
		{
			name: "ProhibitedBy",
			pos:  position{line: 170, col: 1, offset: 3983},
			expr: &choiceExpr{
				pos: position{line: 170, col: 17, offset: 3999},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 170, col: 17, offset: 3999},
						run: (*parser).callonProhibitedBy2,
						expr: &litMatcher{
							pos:        position{line: 170, col: 17, offset: 3999},
							val:        "Lake",
							ignoreCase: false,
							want:       "\"Lake\"",
						},
					},
					&actionExpr{
						pos: position{line: 172, col: 5, offset: 4041},
						run: (*parser).callonProhibitedBy4,
						expr: &litMatcher{
							pos:        position{line: 172, col: 5, offset: 4041},
							val:        "Ocean",
							ignoreCase: false,
							want:       "\"Ocean\"",
						},
					},
				},
			},
		},
		{
			name: "ScoutMovement",
			pos:  position{line: 176, col: 1, offset: 4084},
			expr: &actionExpr{
				pos: position{line: 176, col: 18, offset: 4101},
				run: (*parser).callonScoutMovement1,
				expr: &seqExpr{
					pos: position{line: 176, col: 18, offset: 4101},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 176, col: 18, offset: 4101},
							val:        "Scout",
							ignoreCase: false,
							want:       "\"Scout\"",
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 26, offset: 4109},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 176, col: 29, offset: 4112},
							label: "no",
							expr: &charClassMatcher{
								pos:        position{line: 176, col: 32, offset: 4115},
								val:        "[1-8]",
								ranges:     []rune{'1', '8'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 176, col: 38, offset: 4121},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 42, offset: 4125},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 176, col: 44, offset: 4127},
							label: "results",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 52, offset: 4135},
								name: "ToEOL",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 58, offset: 4141},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "SpaceDirection",
			pos:  position{line: 193, col: 1, offset: 4548},
			expr: &actionExpr{
				pos: position{line: 193, col: 19, offset: 4566},
				run: (*parser).callonSpaceDirection1,
				expr: &seqExpr{
					pos: position{line: 193, col: 19, offset: 4566},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 193, col: 19, offset: 4566},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 22, offset: 4569},
							label: "d",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 24, offset: 4571},
								name: "DIRECTION",
							},
						},
					},
				},
			},
		},
		{
			name: "SpaceUnitID",
			pos:  position{line: 197, col: 1, offset: 4604},
			expr: &actionExpr{
				pos: position{line: 197, col: 16, offset: 4619},
				run: (*parser).callonSpaceUnitID1,
				expr: &seqExpr{
					pos: position{line: 197, col: 16, offset: 4619},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 197, col: 16, offset: 4619},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 19, offset: 4622},
							label: "u",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 21, offset: 4624},
								name: "UNIT_ID",
							},
						},
					},
				},
			},
		},
		{
			name: "StatusLine",
			pos:  position{line: 201, col: 1, offset: 4655},
			expr: &actionExpr{
				pos: position{line: 201, col: 15, offset: 4669},
				run: (*parser).callonStatusLine1,
				expr: &seqExpr{
					pos: position{line: 201, col: 15, offset: 4669},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 201, col: 15, offset: 4669},
							label: "u",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 17, offset: 4671},
								name: "UNIT_ID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 201, col: 25, offset: 4679},
							name: "SP",
						},
						&litMatcher{
							pos:        position{line: 201, col: 28, offset: 4682},
							val:        "Status:",
							ignoreCase: false,
							want:       "\"Status:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 201, col: 38, offset: 4692},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 40, offset: 4694},
							label: "results",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 48, offset: 4702},
								name: "ToEOL",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 201, col: 54, offset: 4708},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Step",
			pos:  position{line: 212, col: 1, offset: 4901},
			expr: &choiceExpr{
				pos: position{line: 212, col: 9, offset: 4909},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 212, col: 9, offset: 4909},
						run: (*parser).callonStep2,
						expr: &seqExpr{
							pos: position{line: 212, col: 9, offset: 4909},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 212, col: 9, offset: 4909},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 11, offset: 4911},
										name: "DIRECTION",
									},
								},
								&litMatcher{
									pos:        position{line: 212, col: 21, offset: 4921},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&labeledExpr{
									pos:   position{line: 212, col: 25, offset: 4925},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 27, offset: 4927},
										name: "TERRAIN_CODE",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 212, col: 40, offset: 4940},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 217, col: 5, offset: 5080},
						run: (*parser).callonStep10,
						expr: &seqExpr{
							pos: position{line: 217, col: 5, offset: 5080},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 217, col: 5, offset: 5080},
									val:        "[Cc]",
									chars:      []rune{'C', 'c'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 217, col: 10, offset: 5085},
									val:        "an't Move on",
									ignoreCase: false,
									want:       "\"an't Move on\"",
								},
								&ruleRefExpr{
									pos:  position{line: 217, col: 25, offset: 5100},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 217, col: 28, offset: 5103},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 217, col: 30, offset: 5105},
										name: "ProhibitedBy",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 217, col: 43, offset: 5118},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 217, col: 46, offset: 5121},
									val:        "to",
									ignoreCase: false,
									want:       "\"to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 217, col: 51, offset: 5126},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 217, col: 54, offset: 5129},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 217, col: 56, offset: 5131},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 217, col: 66, offset: 5141},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 217, col: 69, offset: 5144},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
								&ruleRefExpr{
									pos:  position{line: 217, col: 78, offset: 5153},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 5292},
						run: (*parser).callonStep25,
						expr: &seqExpr{
							pos: position{line: 222, col: 5, offset: 5292},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 222, col: 5, offset: 5292},
									val:        "Cannot Move Wagons into Jungle Hill",
									ignoreCase: false,
									want:       "\"Cannot Move Wagons into Jungle Hill\"",
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 43, offset: 5330},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 222, col: 46, offset: 5333},
									val:        "to",
									ignoreCase: false,
									want:       "\"to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 51, offset: 5338},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 222, col: 54, offset: 5341},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 56, offset: 5343},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 66, offset: 5353},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 222, col: 69, offset: 5356},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 78, offset: 5365},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 5502},
						run: (*parser).callonStep36,
						expr: &seqExpr{
							pos: position{line: 227, col: 5, offset: 5502},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 227, col: 5, offset: 5502},
									val:        "Cannot Move Wagons into Mountains",
									ignoreCase: false,
									want:       "\"Cannot Move Wagons into Mountains\"",
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 41, offset: 5538},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 227, col: 44, offset: 5541},
									val:        "to",
									ignoreCase: false,
									want:       "\"to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 49, offset: 5546},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 227, col: 52, offset: 5549},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 54, offset: 5551},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 64, offset: 5561},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 227, col: 67, offset: 5564},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 76, offset: 5573},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 5714},
						run: (*parser).callonStep47,
						expr: &seqExpr{
							pos: position{line: 232, col: 5, offset: 5714},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 232, col: 5, offset: 5714},
									val:        "Cannot Move Wagons into Swamp/Jungle Hill to",
									ignoreCase: false,
									want:       "\"Cannot Move Wagons into Swamp/Jungle Hill to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 232, col: 52, offset: 5761},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 232, col: 55, offset: 5764},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 232, col: 57, offset: 5766},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 232, col: 67, offset: 5776},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 232, col: 70, offset: 5779},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
								&ruleRefExpr{
									pos:  position{line: 232, col: 79, offset: 5788},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 237, col: 5, offset: 5932},
						run: (*parser).callonStep56,
						expr: &seqExpr{
							pos: position{line: 237, col: 5, offset: 5932},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 237, col: 5, offset: 5932},
									val:        "Cannot Move Wagons into Swamp",
									ignoreCase: false,
									want:       "\"Cannot Move Wagons into Swamp\"",
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 37, offset: 5964},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 237, col: 40, offset: 5967},
									val:        "to",
									ignoreCase: false,
									want:       "\"to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 45, offset: 5972},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 237, col: 48, offset: 5975},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 237, col: 50, offset: 5977},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 60, offset: 5987},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 237, col: 63, offset: 5990},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 72, offset: 5999},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 242, col: 5, offset: 6130},
						run: (*parser).callonStep67,
						expr: &seqExpr{
							pos: position{line: 242, col: 5, offset: 6130},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 242, col: 5, offset: 6130},
									val:        "Group did not return",
									ignoreCase: false,
									want:       "\"Group did not return\"",
								},
								&ruleRefExpr{
									pos:  position{line: 242, col: 28, offset: 6153},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 6196},
						run: (*parser).callonStep71,
						expr: &seqExpr{
							pos: position{line: 244, col: 5, offset: 6196},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 244, col: 5, offset: 6196},
									val:        "failed due to Insufficient capacity to carry",
									ignoreCase: false,
									want:       "\"failed due to Insufficient capacity to carry\"",
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 52, offset: 6243},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 5, offset: 6294},
						run: (*parser).callonStep75,
						expr: &seqExpr{
							pos: position{line: 246, col: 5, offset: 6294},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 246, col: 5, offset: 6294},
									val:        "Find",
									ignoreCase: false,
									want:       "\"Find\"",
								},
								&ruleRefExpr{
									pos:  position{line: 246, col: 12, offset: 6301},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 246, col: 15, offset: 6304},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 246, col: 17, offset: 6306},
										name: "RESOURCE",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 246, col: 26, offset: 6315},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 248, col: 5, offset: 6343},
						run: (*parser).callonStep82,
						expr: &seqExpr{
							pos: position{line: 248, col: 5, offset: 6343},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 248, col: 5, offset: 6343},
									val:        "Find",
									ignoreCase: false,
									want:       "\"Find\"",
								},
								&ruleRefExpr{
									pos:  position{line: 248, col: 12, offset: 6350},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 248, col: 15, offset: 6353},
									label: "n",
									expr: &ruleRefExpr{
										pos:  position{line: 248, col: 17, offset: 6355},
										name: "NUMBER",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 248, col: 24, offset: 6362},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 248, col: 27, offset: 6365},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 248, col: 29, offset: 6367},
										name: "ITEM",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 248, col: 34, offset: 6372},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 6480},
						run: (*parser).callonStep92,
						expr: &seqExpr{
							pos: position{line: 253, col: 5, offset: 6480},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 253, col: 5, offset: 6480},
									val:        "horses not allowed into mangrove swamp to",
									ignoreCase: true,
									want:       "\"Horses not allowed into MANGROVE SWAMP to\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 50, offset: 6525},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 253, col: 53, offset: 6528},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 55, offset: 6530},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 65, offset: 6540},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 253, col: 68, offset: 6543},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 77, offset: 6552},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 258, col: 5, offset: 6696},
						run: (*parser).callonStep101,
						expr: &seqExpr{
							pos: position{line: 258, col: 5, offset: 6696},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 258, col: 5, offset: 6696},
									val:        "Insufficient capacity to carry",
									ignoreCase: false,
									want:       "\"Insufficient capacity to carry\"",
								},
								&ruleRefExpr{
									pos:  position{line: 258, col: 38, offset: 6729},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 6780},
						run: (*parser).callonStep105,
						expr: &seqExpr{
							pos: position{line: 260, col: 5, offset: 6780},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 260, col: 5, offset: 6780},
									val:        "NO DIRECTION",
									ignoreCase: false,
									want:       "\"NO DIRECTION\"",
								},
								&ruleRefExpr{
									pos:  position{line: 260, col: 20, offset: 6795},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 6837},
						run: (*parser).callonStep109,
						expr: &seqExpr{
							pos: position{line: 262, col: 5, offset: 6837},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 262, col: 5, offset: 6837},
									val:        "[Nn]",
									chars:      []rune{'N', 'n'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 262, col: 10, offset: 6842},
									val:        "o Ford on River to",
									ignoreCase: false,
									want:       "\"o Ford on River to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 262, col: 31, offset: 6863},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 262, col: 34, offset: 6866},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 36, offset: 6868},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 262, col: 46, offset: 6878},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 262, col: 49, offset: 6881},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
								&ruleRefExpr{
									pos:  position{line: 262, col: 58, offset: 6890},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 267, col: 5, offset: 7018},
						run: (*parser).callonStep119,
						expr: &seqExpr{
							pos: position{line: 267, col: 5, offset: 7018},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 267, col: 5, offset: 7018},
									val:        "No groups found",
									ignoreCase: false,
									want:       "\"No groups found\"",
								},
								&ruleRefExpr{
									pos:  position{line: 267, col: 23, offset: 7036},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 269, col: 5, offset: 7080},
						run: (*parser).callonStep123,
						expr: &seqExpr{
							pos: position{line: 269, col: 5, offset: 7080},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 269, col: 5, offset: 7080},
									val:        "No Pass into Mountain to",
									ignoreCase: false,
									want:       "\"No Pass into Mountain to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 269, col: 32, offset: 7107},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 269, col: 35, offset: 7110},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 269, col: 37, offset: 7112},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 269, col: 47, offset: 7122},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 269, col: 50, offset: 7125},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
								&ruleRefExpr{
									pos:  position{line: 269, col: 59, offset: 7134},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 274, col: 5, offset: 7275},
						run: (*parser).callonStep132,
						expr: &seqExpr{
							pos: position{line: 274, col: 5, offset: 7275},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 274, col: 5, offset: 7275},
									val:        "No River Adjacent to Hex to",
									ignoreCase: false,
									want:       "\"No River Adjacent to Hex to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 274, col: 35, offset: 7305},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 274, col: 38, offset: 7308},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 274, col: 40, offset: 7310},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 274, col: 50, offset: 7320},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 274, col: 53, offset: 7323},
									val:        "of HEX",
									ignoreCase: false,
									want:       "\"of HEX\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 278, col: 5, offset: 7421},
						run: (*parser).callonStep140,
						expr: &seqExpr{
							pos: position{line: 278, col: 5, offset: 7421},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 278, col: 5, offset: 7421},
									val:        "[Nn]",
									chars:      []rune{'N', 'n'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 278, col: 10, offset: 7426},
									val:        "ot enough M.P's",
									ignoreCase: false,
									want:       "\"ot enough M.P's\"",
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 28, offset: 7444},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 30, offset: 7446},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 283, col: 5, offset: 7564},
						run: (*parser).callonStep146,
						expr: &seqExpr{
							pos: position{line: 283, col: 5, offset: 7564},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 283, col: 5, offset: 7564},
									val:        "[Nn]",
									chars:      []rune{'N', 'n'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 283, col: 10, offset: 7569},
									val:        "ot enough M.P's to move to",
									ignoreCase: false,
									want:       "\"ot enough M.P's to move to\"",
								},
								&ruleRefExpr{
									pos:  position{line: 283, col: 39, offset: 7598},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 283, col: 42, offset: 7601},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 283, col: 44, offset: 7603},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 283, col: 54, offset: 7613},
									name: "SP",
								},
								&litMatcher{
									pos:        position{line: 283, col: 57, offset: 7616},
									val:        "into",
									ignoreCase: false,
									want:       "\"into\"",
								},
								&ruleRefExpr{
									pos:  position{line: 283, col: 64, offset: 7623},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 283, col: 67, offset: 7626},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 283, col: 69, offset: 7628},
										name: "TERRAIN",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 283, col: 77, offset: 7636},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 288, col: 5, offset: 7770},
						run: (*parser).callonStep159,
						expr: &seqExpr{
							pos: position{line: 288, col: 5, offset: 7770},
							exprs: []any{
								&charClassMatcher{
									pos:        position{line: 288, col: 5, offset: 7770},
									val:        "[Nn]",
									chars:      []rune{'N', 'n'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 288, col: 10, offset: 7775},
									val:        "othing of interest found",
									ignoreCase: false,
									want:       "\"othing of interest found\"",
								},
								&ruleRefExpr{
									pos:  position{line: 288, col: 37, offset: 7802},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 7845},
						run: (*parser).callonStep164,
						expr: &seqExpr{
							pos: position{line: 290, col: 5, offset: 7845},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 290, col: 5, offset: 7845},
									val:        "Patrolled and found",
									ignoreCase: false,
									want:       "\"Patrolled and found\"",
								},
								&ruleRefExpr{
									pos:  position{line: 290, col: 27, offset: 7867},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 290, col: 30, offset: 7870},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 290, col: 32, offset: 7872},
										name: "UNIT_ID",
									},
								},
								&labeledExpr{
									pos:   position{line: 290, col: 40, offset: 7880},
									label: "sui",
									expr: &zeroOrMoreExpr{
										pos: position{line: 290, col: 44, offset: 7884},
										expr: &ruleRefExpr{
											pos:  position{line: 290, col: 44, offset: 7884},
											name: "SpaceUnitID",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 290, col: 57, offset: 7897},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 302, col: 5, offset: 8293},
						run: (*parser).callonStep174,
						expr: &seqExpr{
							pos: position{line: 302, col: 5, offset: 8293},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 302, col: 5, offset: 8293},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 7, offset: 8295},
										name: "ObviousNeighboringTerrainCode",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 302, col: 37, offset: 8325},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 37, offset: 8325},
										name: "SP",
									},
								},
								&labeledExpr{
									pos:   position{line: 302, col: 41, offset: 8329},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 43, offset: 8331},
										name: "DIRECTION",
									},
								},
								&labeledExpr{
									pos:   position{line: 302, col: 53, offset: 8341},
									label: "sdi",
									expr: &zeroOrMoreExpr{
										pos: position{line: 302, col: 57, offset: 8345},
										expr: &ruleRefExpr{
											pos:  position{line: 302, col: 57, offset: 8345},
											name: "SpaceDirection",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 302, col: 73, offset: 8361},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 317, col: 5, offset: 8823},
						run: (*parser).callonStep186,
						expr: &seqExpr{
							pos: position{line: 317, col: 5, offset: 8823},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 317, col: 5, offset: 8823},
									label: "et",
									expr: &ruleRefExpr{
										pos:  position{line: 317, col: 8, offset: 8826},
										name: "EdgeType",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 317, col: 17, offset: 8835},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 317, col: 20, offset: 8838},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 317, col: 22, offset: 8840},
										name: "DIRECTION",
									},
								},
								&labeledExpr{
									pos:   position{line: 317, col: 32, offset: 8850},
									label: "edi",
									expr: &zeroOrMoreExpr{
										pos: position{line: 317, col: 36, offset: 8854},
										expr: &ruleRefExpr{
											pos:  position{line: 317, col: 36, offset: 8854},
											name: "SpaceDirection",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 317, col: 52, offset: 8870},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 329, col: 5, offset: 9280},
						run: (*parser).callonStep197,
						expr: &seqExpr{
							pos: position{line: 329, col: 5, offset: 9280},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 329, col: 5, offset: 9280},
									label: "n",
									expr: &ruleRefExpr{
										pos:  position{line: 329, col: 7, offset: 9282},
										name: "NUMBER",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 329, col: 14, offset: 9289},
									name: "SP",
								},
								&labeledExpr{
									pos:   position{line: 329, col: 17, offset: 9292},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 329, col: 19, offset: 9294},
										name: "ITEM",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 329, col: 24, offset: 9299},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 334, col: 5, offset: 9407},
						run: (*parser).callonStep205,
						expr: &seqExpr{
							pos: position{line: 334, col: 5, offset: 9407},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 334, col: 5, offset: 9407},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 334, col: 7, offset: 9409},
										name: "UNIT_ID",
									},
								},
								&labeledExpr{
									pos:   position{line: 334, col: 15, offset: 9417},
									label: "sui",
									expr: &zeroOrMoreExpr{
										pos: position{line: 334, col: 19, offset: 9421},
										expr: &ruleRefExpr{
											pos:  position{line: 334, col: 19, offset: 9421},
											name: "SpaceUnitID",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 334, col: 32, offset: 9434},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 345, col: 5, offset: 9751},
						run: (*parser).callonStep213,
						expr: &seqExpr{
							pos: position{line: 345, col: 5, offset: 9751},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 345, col: 5, offset: 9751},
									label: "lh",
									expr: &ruleRefExpr{
										pos:  position{line: 345, col: 8, offset: 9754},
										name: "Longhouse",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 345, col: 18, offset: 9764},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 347, col: 5, offset: 9793},
						run: (*parser).callonStep218,
						expr: &seqExpr{
							pos: position{line: 347, col: 5, offset: 9793},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 347, col: 5, offset: 9793},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 347, col: 7, offset: 9795},
										name: "RESOURCE",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 347, col: 16, offset: 9804},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 349, col: 5, offset: 9832},
						run: (*parser).callonStep223,
						expr: &seqExpr{
							pos: position{line: 349, col: 5, offset: 9832},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 349, col: 5, offset: 9832},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 349, col: 7, offset: 9834},
										name: "DIRECTION",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 349, col: 17, offset: 9844},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 9872},
						run: (*parser).callonStep228,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 9872},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 351, col: 5, offset: 9872},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 7, offset: 9874},
										name: "TERRAIN",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 15, offset: 9882},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TribeFollows",
			pos:  position{line: 355, col: 1, offset: 9909},
			expr: &actionExpr{
				pos: position{line: 355, col: 17, offset: 9925},
				run: (*parser).callonTribeFollows1,
				expr: &seqExpr{
					pos: position{line: 355, col: 17, offset: 9925},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 355, col: 17, offset: 9925},
							val:        "Tribe Follows",
							ignoreCase: false,
							want:       "\"Tribe Follows\"",
						},
						&ruleRefExpr{
							pos:  position{line: 355, col: 33, offset: 9941},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 36, offset: 9944},
							label: "u",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 38, offset: 9946},
								name: "UNIT_ID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 355, col: 46, offset: 9954},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 355, col: 48, offset: 9956},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TribeGoesTo",
			pos:  position{line: 360, col: 1, offset: 10057},
			expr: &actionExpr{
				pos: position{line: 360, col: 16, offset: 10072},
				run: (*parser).callonTribeGoesTo1,
				expr: &seqExpr{
					pos: position{line: 360, col: 16, offset: 10072},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 360, col: 16, offset: 10072},
							val:        "Tribe Goes to",
							ignoreCase: false,
							want:       "\"Tribe Goes to\"",
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 32, offset: 10088},
							name: "SP",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 35, offset: 10091},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 37, offset: 10093},
								name: "COORDS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 44, offset: 10100},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 46, offset: 10102},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TribeMovement",
			pos:  position{line: 365, col: 1, offset: 10199},
			expr: &actionExpr{
				pos: position{line: 365, col: 18, offset: 10216},
				run: (*parser).callonTribeMovement1,
				expr: &seqExpr{
					pos: position{line: 365, col: 18, offset: 10216},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 365, col: 18, offset: 10216},
							val:        "Tribe Movement:",
							ignoreCase: false,
							want:       "\"Tribe Movement:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 36, offset: 10234},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 38, offset: 10236},
							label: "results",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 46, offset: 10244},
								name: "ToEOL",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 52, offset: 10250},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TurnInfo",
			pos:  position{line: 373, col: 1, offset: 10397},
			expr: &actionExpr{
				pos: position{line: 373, col: 13, offset: 10409},
				run: (*parser).callonTurnInfo1,
				expr: &seqExpr{
					pos: position{line: 373, col: 13, offset: 10409},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 373, col: 13, offset: 10409},
							label: "cd",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 16, offset: 10412},
								name: "CurrentTurn",
							},
						},
						&litMatcher{
							pos:        position{line: 373, col: 28, offset: 10424},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 32, offset: 10428},
							name: "SP",
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 35, offset: 10431},
							name: "TurnSeason",
						},
						&litMatcher{
							pos:        position{line: 373, col: 46, offset: 10442},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 50, offset: 10446},
							name: "SP",
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 53, offset: 10449},
							name: "TurnWeather",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 65, offset: 10461},
							label: "nt",
							expr: &zeroOrOneExpr{
								pos: position{line: 373, col: 68, offset: 10464},
								expr: &ruleRefExpr{
									pos:  position{line: 373, col: 68, offset: 10464},
									name: "NextTurn",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 78, offset: 10474},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 80, offset: 10476},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "CurrentTurn",
			pos:  position{line: 386, col: 1, offset: 10694},
			expr: &actionExpr{
				pos: position{line: 386, col: 16, offset: 10709},
				run: (*parser).callonCurrentTurn1,
				expr: &seqExpr{
					pos: position{line: 386, col: 16, offset: 10709},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 386, col: 16, offset: 10709},
							val:        "Current Turn",
							ignoreCase: false,
							want:       "\"Current Turn\"",
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 31, offset: 10724},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 386, col: 33, offset: 10726},
							label: "cd",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 36, offset: 10729},
								name: "YearMonth",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 46, offset: 10739},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 386, col: 48, offset: 10741},
							val:        "(#",
							ignoreCase: false,
							want:       "\"(#\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 386, col: 53, offset: 10746},
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 53, offset: 10746},
								name: "DIGIT",
							},
						},
						&litMatcher{
							pos:        position{line: 386, col: 60, offset: 10753},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "NextTurn",
			pos:  position{line: 390, col: 1, offset: 10781},
			expr: &actionExpr{
				pos: position{line: 390, col: 13, offset: 10793},
				run: (*parser).callonNextTurn1,
				expr: &seqExpr{
					pos: position{line: 390, col: 13, offset: 10793},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 390, col: 13, offset: 10793},
							name: "SP",
						},
						&litMatcher{
							pos:        position{line: 390, col: 16, offset: 10796},
							val:        "Next Turn",
							ignoreCase: false,
							want:       "\"Next Turn\"",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 28, offset: 10808},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 30, offset: 10810},
							label: "nd",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 33, offset: 10813},
								name: "YearMonth",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 43, offset: 10823},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 390, col: 45, offset: 10825},
							val:        "(#",
							ignoreCase: false,
							want:       "\"(#\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 390, col: 50, offset: 10830},
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 50, offset: 10830},
								name: "DIGIT",
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 57, offset: 10837},
							val:        "),",
							ignoreCase: false,
							want:       "\"),\"",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 62, offset: 10842},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 64, offset: 10844},
							name: "ReportDate",
						},
					},
				},
			},
		},
		{
			name: "ReportDate",
			pos:  position{line: 394, col: 1, offset: 10879},
			expr: &actionExpr{
				pos: position{line: 394, col: 15, offset: 10893},
				run: (*parser).callonReportDate1,
				expr: &seqExpr{
					pos: position{line: 394, col: 15, offset: 10893},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 394, col: 15, offset: 10893},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 394, col: 21, offset: 10899},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 21, offset: 10899},
								name: "DIGIT",
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 28, offset: 10906},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 32, offset: 10910},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 394, col: 38, offset: 10916},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 38, offset: 10916},
								name: "DIGIT",
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 45, offset: 10923},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 49, offset: 10927},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 55, offset: 10933},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 61, offset: 10939},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 67, offset: 10945},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "ToEOL",
			pos:  position{line: 399, col: 1, offset: 11023},
			expr: &actionExpr{
				pos: position{line: 399, col: 10, offset: 11032},
				run: (*parser).callonToEOL1,
				expr: &seqExpr{
					pos: position{line: 399, col: 10, offset: 11032},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 10, offset: 11032},
							expr: &anyMatcher{
								line: 399, col: 10, offset: 11032,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 399, col: 13, offset: 11035},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TurnSeason",
			pos:  position{line: 403, col: 1, offset: 11067},
			expr: &actionExpr{
				pos: position{line: 403, col: 15, offset: 11081},
				run: (*parser).callonTurnSeason1,
				expr: &seqExpr{
					pos: position{line: 403, col: 15, offset: 11081},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 403, col: 15, offset: 11081},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&oneOrMoreExpr{
							pos: position{line: 403, col: 20, offset: 11086},
							expr: &charClassMatcher{
								pos:        position{line: 403, col: 20, offset: 11086},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "TurnWeather",
			pos:  position{line: 408, col: 1, offset: 11168},
			expr: &actionExpr{
				pos: position{line: 408, col: 16, offset: 11183},
				run: (*parser).callonTurnWeather1,
				expr: &seqExpr{
					pos: position{line: 408, col: 16, offset: 11183},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 408, col: 16, offset: 11183},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&oneOrMoreExpr{
							pos: position{line: 408, col: 21, offset: 11188},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 21, offset: 11188},
								val:        "[A-Za-z-]",
								chars:      []rune{'-'},
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "YearMonth",
			pos:  position{line: 413, col: 1, offset: 11272},
			expr: &actionExpr{
				pos: position{line: 413, col: 14, offset: 11285},
				run: (*parser).callonYearMonth1,
				expr: &seqExpr{
					pos: position{line: 413, col: 14, offset: 11285},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 413, col: 14, offset: 11285},
							label: "y",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 16, offset: 11287},
								name: "YEAR",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 21, offset: 11292},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 25, offset: 11296},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 27, offset: 11298},
								name: "MONTH",
							},
						},
					},
				},
			},
		},
		{
			name: "COMPASSPOINT",
			pos:  position{line: 420, col: 1, offset: 11388},
			expr: &choiceExpr{
				pos: position{line: 420, col: 17, offset: 11404},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 420, col: 17, offset: 11404},
						run: (*parser).callonCOMPASSPOINT2,
						expr: &litMatcher{
							pos:        position{line: 420, col: 17, offset: 11404},
							val:        "NE/NE",
							ignoreCase: false,
							want:       "\"NE/NE\"",
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 5, offset: 11452},
						run: (*parser).callonCOMPASSPOINT4,
						expr: &litMatcher{
							pos:        position{line: 422, col: 5, offset: 11452},
							val:        "NE/SE",
							ignoreCase: false,
							want:       "\"NE/SE\"",
						},
					},
					&actionExpr{
						pos: position{line: 424, col: 5, offset: 11495},
						run: (*parser).callonCOMPASSPOINT6,
						expr: &litMatcher{
							pos:        position{line: 424, col: 5, offset: 11495},
							val:        "NW/NW",
							ignoreCase: false,
							want:       "\"NW/NW\"",
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 11543},
						run: (*parser).callonCOMPASSPOINT8,
						expr: &litMatcher{
							pos:        position{line: 426, col: 5, offset: 11543},
							val:        "N/NE",
							ignoreCase: false,
							want:       "\"N/NE\"",
						},
					},
					&actionExpr{
						pos: position{line: 428, col: 5, offset: 11595},
						run: (*parser).callonCOMPASSPOINT10,
						expr: &litMatcher{
							pos:        position{line: 428, col: 5, offset: 11595},
							val:        "N/NW",
							ignoreCase: false,
							want:       "\"N/NW\"",
						},
					},
					&actionExpr{
						pos: position{line: 430, col: 5, offset: 11647},
						run: (*parser).callonCOMPASSPOINT12,
						expr: &litMatcher{
							pos:        position{line: 430, col: 5, offset: 11647},
							val:        "N/N",
							ignoreCase: false,
							want:       "\"N/N\"",
						},
					},
					&actionExpr{
						pos: position{line: 432, col: 5, offset: 11689},
						run: (*parser).callonCOMPASSPOINT14,
						expr: &litMatcher{
							pos:        position{line: 432, col: 5, offset: 11689},
							val:        "SE/SE",
							ignoreCase: false,
							want:       "\"SE/SE\"",
						},
					},
					&actionExpr{
						pos: position{line: 434, col: 5, offset: 11737},
						run: (*parser).callonCOMPASSPOINT16,
						expr: &litMatcher{
							pos:        position{line: 434, col: 5, offset: 11737},
							val:        "SW/NW",
							ignoreCase: false,
							want:       "\"SW/NW\"",
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 11780},
						run: (*parser).callonCOMPASSPOINT18,
						expr: &litMatcher{
							pos:        position{line: 436, col: 5, offset: 11780},
							val:        "SW/SW",
							ignoreCase: false,
							want:       "\"SW/SW\"",
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 5, offset: 11828},
						run: (*parser).callonCOMPASSPOINT20,
						expr: &litMatcher{
							pos:        position{line: 438, col: 5, offset: 11828},
							val:        "S/SE",
							ignoreCase: false,
							want:       "\"S/SE\"",
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 11880},
						run: (*parser).callonCOMPASSPOINT22,
						expr: &litMatcher{
							pos:        position{line: 440, col: 5, offset: 11880},
							val:        "S/SW",
							ignoreCase: false,
							want:       "\"S/SW\"",
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 5, offset: 11932},
						run: (*parser).callonCOMPASSPOINT24,
						expr: &litMatcher{
							pos:        position{line: 442, col: 5, offset: 11932},
							val:        "S/S",
							ignoreCase: false,
							want:       "\"S/S\"",
						},
					},
				},
			},
		},
		{
			name: "COORDS",
			pos:  position{line: 446, col: 1, offset: 11973},
			expr: &choiceExpr{
				pos: position{line: 446, col: 11, offset: 11983},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 446, col: 11, offset: 11983},
						run: (*parser).callonCOORDS2,
						expr: &litMatcher{
							pos:        position{line: 446, col: 11, offset: 11983},
							val:        "N/A",
							ignoreCase: false,
							want:       "\"N/A\"",
						},
					},
					&actionExpr{
						pos: position{line: 448, col: 5, offset: 12017},
						run: (*parser).callonCOORDS4,
						expr: &seqExpr{
							pos: position{line: 448, col: 5, offset: 12017},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 448, col: 5, offset: 12017},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 10, offset: 12022},
									name: "SP",
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 13, offset: 12025},
									name: "DIGIT",
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 19, offset: 12031},
									name: "DIGIT",
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 25, offset: 12037},
									name: "DIGIT",
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 31, offset: 12043},
									name: "DIGIT",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 450, col: 5, offset: 12086},
						run: (*parser).callonCOORDS12,
						expr: &seqExpr{
							pos: position{line: 450, col: 5, offset: 12086},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 450, col: 5, offset: 12086},
									name: "LETTER",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 12, offset: 12093},
									name: "LETTER",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 19, offset: 12100},
									name: "SP",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 22, offset: 12103},
									name: "DIGIT",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 28, offset: 12109},
									name: "DIGIT",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 34, offset: 12115},
									name: "DIGIT",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 40, offset: 12121},
									name: "DIGIT",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CROWSIGHTING",
			pos:  position{line: 454, col: 1, offset: 12163},
			expr: &choiceExpr{
				pos: position{line: 454, col: 17, offset: 12179},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 454, col: 17, offset: 12179},
						run: (*parser).callonCROWSIGHTING2,
						expr: &litMatcher{
							pos:        position{line: 454, col: 17, offset: 12179},
							val:        "Sight Land",
							ignoreCase: false,
							want:       "\"Sight Land\"",
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 12234},
						run: (*parser).callonCROWSIGHTING4,
						expr: &litMatcher{
							pos:        position{line: 456, col: 5, offset: 12234},
							val:        "Sight Water",
							ignoreCase: false,
							want:       "\"Sight Water\"",
						},
					},
				},
			},
		},
		{
			name: "DIRECTION",
			pos:  position{line: 460, col: 1, offset: 12290},
			expr: &choiceExpr{
				pos: position{line: 460, col: 14, offset: 12303},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 460, col: 14, offset: 12303},
						run: (*parser).callonDIRECTION2,
						expr: &litMatcher{
							pos:        position{line: 460, col: 14, offset: 12303},
							val:        "ne",
							ignoreCase: true,
							want:       "\"NE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 462, col: 5, offset: 12351},
						run: (*parser).callonDIRECTION4,
						expr: &litMatcher{
							pos:        position{line: 462, col: 5, offset: 12351},
							val:        "se",
							ignoreCase: true,
							want:       "\"SE\"i",
						},
					},
					&actionExpr{
						pos: position{line: 464, col: 5, offset: 12399},
						run: (*parser).callonDIRECTION6,
						expr: &litMatcher{
							pos:        position{line: 464, col: 5, offset: 12399},
							val:        "sw",
							ignoreCase: true,
							want:       "\"SW\"i",
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 12447},
						run: (*parser).callonDIRECTION8,
						expr: &litMatcher{
							pos:        position{line: 466, col: 5, offset: 12447},
							val:        "nw",
							ignoreCase: true,
							want:       "\"NW\"i",
						},
					},
					&actionExpr{
						pos: position{line: 468, col: 5, offset: 12495},
						run: (*parser).callonDIRECTION10,
						expr: &litMatcher{
							pos:        position{line: 468, col: 5, offset: 12495},
							val:        "n",
							ignoreCase: true,
							want:       "\"N\"i",
						},
					},
					&actionExpr{
						pos: position{line: 470, col: 5, offset: 12538},
						run: (*parser).callonDIRECTION12,
						expr: &litMatcher{
							pos:        position{line: 470, col: 5, offset: 12538},
							val:        "s",
							ignoreCase: true,
							want:       "\"S\"i",
						},
					},
				},
			},
		},
		{
			name: "ITEM",
			pos:  position{line: 474, col: 1, offset: 12580},
			expr: &choiceExpr{
				pos: position{line: 474, col: 9, offset: 12588},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 474, col: 9, offset: 12588},
						run: (*parser).callonITEM2,
						expr: &litMatcher{
							pos:        position{line: 474, col: 9, offset: 12588},
							val:        "adze",
							ignoreCase: true,
							want:       "\"adze\"i",
						},
					},
					&actionExpr{
						pos: position{line: 475, col: 6, offset: 12634},
						run: (*parser).callonITEM4,
						expr: &litMatcher{
							pos:        position{line: 475, col: 6, offset: 12634},
							val:        "arbalest",
							ignoreCase: true,
							want:       "\"arbalest\"i",
						},
					},
					&actionExpr{
						pos: position{line: 476, col: 6, offset: 12684},
						run: (*parser).callonITEM6,
						expr: &litMatcher{
							pos:        position{line: 476, col: 6, offset: 12684},
							val:        "arrows",
							ignoreCase: true,
							want:       "\"arrows\"i",
						},
					},
					&actionExpr{
						pos: position{line: 477, col: 6, offset: 12732},
						run: (*parser).callonITEM8,
						expr: &litMatcher{
							pos:        position{line: 477, col: 6, offset: 12732},
							val:        "axes",
							ignoreCase: true,
							want:       "\"axes\"i",
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 6, offset: 12778},
						run: (*parser).callonITEM10,
						expr: &litMatcher{
							pos:        position{line: 478, col: 6, offset: 12778},
							val:        "backpack",
							ignoreCase: true,
							want:       "\"backpack\"i",
						},
					},
					&actionExpr{
						pos: position{line: 479, col: 6, offset: 12828},
						run: (*parser).callonITEM12,
						expr: &litMatcher{
							pos:        position{line: 479, col: 6, offset: 12828},
							val:        "ballistae",
							ignoreCase: true,
							want:       "\"ballistae\"i",
						},
					},
					&actionExpr{
						pos: position{line: 480, col: 6, offset: 12879},
						run: (*parser).callonITEM14,
						expr: &litMatcher{
							pos:        position{line: 480, col: 6, offset: 12879},
							val:        "bark",
							ignoreCase: true,
							want:       "\"bark\"i",
						},
					},
					&actionExpr{
						pos: position{line: 481, col: 6, offset: 12925},
						run: (*parser).callonITEM16,
						expr: &litMatcher{
							pos:        position{line: 481, col: 6, offset: 12925},
							val:        "barrel",
							ignoreCase: true,
							want:       "\"barrel\"i",
						},
					},
					&actionExpr{
						pos: position{line: 482, col: 6, offset: 12973},
						run: (*parser).callonITEM18,
						expr: &litMatcher{
							pos:        position{line: 482, col: 6, offset: 12973},
							val:        "bladder",
							ignoreCase: true,
							want:       "\"bladder\"i",
						},
					},
					&actionExpr{
						pos: position{line: 483, col: 6, offset: 13022},
						run: (*parser).callonITEM20,
						expr: &litMatcher{
							pos:        position{line: 483, col: 6, offset: 13022},
							val:        "blubber",
							ignoreCase: true,
							want:       "\"blubber\"i",
						},
					},
					&actionExpr{
						pos: position{line: 484, col: 6, offset: 13071},
						run: (*parser).callonITEM22,
						expr: &litMatcher{
							pos:        position{line: 484, col: 6, offset: 13071},
							val:        "boat",
							ignoreCase: true,
							want:       "\"boat\"i",
						},
					},
					&actionExpr{
						pos: position{line: 485, col: 6, offset: 13117},
						run: (*parser).callonITEM24,
						expr: &litMatcher{
							pos:        position{line: 485, col: 6, offset: 13117},
							val:        "bonearmour",
							ignoreCase: true,
							want:       "\"bonearmour\"i",
						},
					},
					&actionExpr{
						pos: position{line: 486, col: 6, offset: 13169},
						run: (*parser).callonITEM26,
						expr: &litMatcher{
							pos:        position{line: 486, col: 6, offset: 13169},
							val:        "bones",
							ignoreCase: true,
							want:       "\"bones\"i",
						},
					},
					&actionExpr{
						pos: position{line: 487, col: 6, offset: 13216},
						run: (*parser).callonITEM28,
						expr: &litMatcher{
							pos:        position{line: 487, col: 6, offset: 13216},
							val:        "bows",
							ignoreCase: true,
							want:       "\"bows\"i",
						},
					},
					&actionExpr{
						pos: position{line: 488, col: 6, offset: 13262},
						run: (*parser).callonITEM30,
						expr: &litMatcher{
							pos:        position{line: 488, col: 6, offset: 13262},
							val:        "bread",
							ignoreCase: true,
							want:       "\"bread\"i",
						},
					},
					&actionExpr{
						pos: position{line: 489, col: 6, offset: 13309},
						run: (*parser).callonITEM32,
						expr: &litMatcher{
							pos:        position{line: 489, col: 6, offset: 13309},
							val:        "breastplate",
							ignoreCase: true,
							want:       "\"breastplate\"i",
						},
					},
					&actionExpr{
						pos: position{line: 490, col: 6, offset: 13362},
						run: (*parser).callonITEM34,
						expr: &litMatcher{
							pos:        position{line: 490, col: 6, offset: 13362},
							val:        "candle",
							ignoreCase: true,
							want:       "\"candle\"i",
						},
					},
					&actionExpr{
						pos: position{line: 491, col: 6, offset: 13410},
						run: (*parser).callonITEM36,
						expr: &litMatcher{
							pos:        position{line: 491, col: 6, offset: 13410},
							val:        "canoes",
							ignoreCase: true,
							want:       "\"canoes\"i",
						},
					},
					&actionExpr{
						pos: position{line: 492, col: 6, offset: 13458},
						run: (*parser).callonITEM38,
						expr: &litMatcher{
							pos:        position{line: 492, col: 6, offset: 13458},
							val:        "carpets",
							ignoreCase: true,
							want:       "\"carpets\"i",
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 6, offset: 13507},
						run: (*parser).callonITEM40,
						expr: &litMatcher{
							pos:        position{line: 493, col: 6, offset: 13507},
							val:        "catapult",
							ignoreCase: true,
							want:       "\"catapult\"i",
						},
					},
					&actionExpr{
						pos: position{line: 494, col: 6, offset: 13557},
						run: (*parser).callonITEM42,
						expr: &litMatcher{
							pos:        position{line: 494, col: 6, offset: 13557},
							val:        "cattle",
							ignoreCase: true,
							want:       "\"cattle\"i",
						},
					},
					&actionExpr{
						pos: position{line: 495, col: 6, offset: 13605},
						run: (*parser).callonITEM44,
						expr: &litMatcher{
							pos:        position{line: 495, col: 6, offset: 13605},
							val:        "cauldrons",
							ignoreCase: true,
							want:       "\"cauldrons\"i",
						},
					},
					&actionExpr{
						pos: position{line: 496, col: 6, offset: 13656},
						run: (*parser).callonITEM46,
						expr: &litMatcher{
							pos:        position{line: 496, col: 6, offset: 13656},
							val:        "chain",
							ignoreCase: true,
							want:       "\"chain\"i",
						},
					},
					&actionExpr{
						pos: position{line: 497, col: 6, offset: 13703},
						run: (*parser).callonITEM48,
						expr: &litMatcher{
							pos:        position{line: 497, col: 6, offset: 13703},
							val:        "china",
							ignoreCase: true,
							want:       "\"china\"i",
						},
					},
					&actionExpr{
						pos: position{line: 498, col: 6, offset: 13750},
						run: (*parser).callonITEM50,
						expr: &litMatcher{
							pos:        position{line: 498, col: 6, offset: 13750},
							val:        "clay",
							ignoreCase: true,
							want:       "\"clay\"i",
						},
					},
					&actionExpr{
						pos: position{line: 499, col: 6, offset: 13796},
						run: (*parser).callonITEM52,
						expr: &litMatcher{
							pos:        position{line: 499, col: 6, offset: 13796},
							val:        "cloth",
							ignoreCase: true,
							want:       "\"cloth\"i",
						},
					},
					&actionExpr{
						pos: position{line: 500, col: 6, offset: 13843},
						run: (*parser).callonITEM54,
						expr: &litMatcher{
							pos:        position{line: 500, col: 6, offset: 13843},
							val:        "clubs",
							ignoreCase: true,
							want:       "\"clubs\"i",
						},
					},
					&actionExpr{
						pos: position{line: 501, col: 6, offset: 13890},
						run: (*parser).callonITEM56,
						expr: &litMatcher{
							pos:        position{line: 501, col: 6, offset: 13890},
							val:        "coal",
							ignoreCase: true,
							want:       "\"coal\"i",
						},
					},
					&actionExpr{
						pos: position{line: 502, col: 6, offset: 13936},
						run: (*parser).callonITEM58,
						expr: &litMatcher{
							pos:        position{line: 502, col: 6, offset: 13936},
							val:        "coffee",
							ignoreCase: true,
							want:       "\"coffee\"i",
						},
					},
					&actionExpr{
						pos: position{line: 503, col: 6, offset: 13984},
						run: (*parser).callonITEM60,
						expr: &litMatcher{
							pos:        position{line: 503, col: 6, offset: 13984},
							val:        "coins",
							ignoreCase: true,
							want:       "\"coins\"i",
						},
					},
					&actionExpr{
						pos: position{line: 504, col: 6, offset: 14031},
						run: (*parser).callonITEM62,
						expr: &litMatcher{
							pos:        position{line: 504, col: 6, offset: 14031},
							val:        "cotton",
							ignoreCase: true,
							want:       "\"cotton\"i",
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 6, offset: 14079},
						run: (*parser).callonITEM64,
						expr: &litMatcher{
							pos:        position{line: 505, col: 6, offset: 14079},
							val:        "cuirass",
							ignoreCase: true,
							want:       "\"cuirass\"i",
						},
					},
					&actionExpr{
						pos: position{line: 506, col: 6, offset: 14128},
						run: (*parser).callonITEM66,
						expr: &litMatcher{
							pos:        position{line: 506, col: 6, offset: 14128},
							val:        "cuirboilli",
							ignoreCase: true,
							want:       "\"cuirboilli\"i",
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 6, offset: 14180},
						run: (*parser).callonITEM68,
						expr: &litMatcher{
							pos:        position{line: 507, col: 6, offset: 14180},
							val:        "diamond",
							ignoreCase: true,
							want:       "\"diamond\"i",
						},
					},
					&actionExpr{
						pos: position{line: 508, col: 6, offset: 14229},
						run: (*parser).callonITEM70,
						expr: &litMatcher{
							pos:        position{line: 508, col: 6, offset: 14229},
							val:        "diamonds",
							ignoreCase: true,
							want:       "\"diamonds\"i",
						},
					},
					&actionExpr{
						pos: position{line: 509, col: 6, offset: 14279},
						run: (*parser).callonITEM72,
						expr: &litMatcher{
							pos:        position{line: 509, col: 6, offset: 14279},
							val:        "drum",
							ignoreCase: true,
							want:       "\"drum\"i",
						},
					},
					&actionExpr{
						pos: position{line: 510, col: 6, offset: 14325},
						run: (*parser).callonITEM74,
						expr: &litMatcher{
							pos:        position{line: 510, col: 6, offset: 14325},
							val:        "elephant",
							ignoreCase: true,
							want:       "\"elephant\"i",
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 6, offset: 14375},
						run: (*parser).callonITEM76,
						expr: &litMatcher{
							pos:        position{line: 511, col: 6, offset: 14375},
							val:        "falchion",
							ignoreCase: true,
							want:       "\"falchion\"i",
						},
					},
					&actionExpr{
						pos: position{line: 512, col: 6, offset: 14425},
						run: (*parser).callonITEM78,
						expr: &litMatcher{
							pos:        position{line: 512, col: 6, offset: 14425},
							val:        "fish",
							ignoreCase: true,
							want:       "\"fish\"i",
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 6, offset: 14471},
						run: (*parser).callonITEM80,
						expr: &litMatcher{
							pos:        position{line: 513, col: 6, offset: 14471},
							val:        "flax",
							ignoreCase: true,
							want:       "\"flax\"i",
						},
					},
					&actionExpr{
						pos: position{line: 514, col: 6, offset: 14517},
						run: (*parser).callonITEM82,
						expr: &litMatcher{
							pos:        position{line: 514, col: 6, offset: 14517},
							val:        "flour",
							ignoreCase: true,
							want:       "\"flour\"i",
						},
					},
					&actionExpr{
						pos: position{line: 515, col: 6, offset: 14564},
						run: (*parser).callonITEM84,
						expr: &litMatcher{
							pos:        position{line: 515, col: 6, offset: 14564},
							val:        "flute",
							ignoreCase: true,
							want:       "\"flute\"i",
						},
					},
					&actionExpr{
						pos: position{line: 516, col: 6, offset: 14611},
						run: (*parser).callonITEM86,
						expr: &litMatcher{
							pos:        position{line: 516, col: 6, offset: 14611},
							val:        "fodder",
							ignoreCase: true,
							want:       "\"fodder\"i",
						},
					},
					&actionExpr{
						pos: position{line: 517, col: 6, offset: 14659},
						run: (*parser).callonITEM88,
						expr: &litMatcher{
							pos:        position{line: 517, col: 6, offset: 14659},
							val:        "frame",
							ignoreCase: true,
							want:       "\"frame\"i",
						},
					},
					&actionExpr{
						pos: position{line: 518, col: 6, offset: 14706},
						run: (*parser).callonITEM90,
						expr: &litMatcher{
							pos:        position{line: 518, col: 6, offset: 14706},
							val:        "frankincense",
							ignoreCase: true,
							want:       "\"frankincense\"i",
						},
					},
					&actionExpr{
						pos: position{line: 519, col: 6, offset: 14760},
						run: (*parser).callonITEM92,
						expr: &litMatcher{
							pos:        position{line: 519, col: 6, offset: 14760},
							val:        "fur",
							ignoreCase: true,
							want:       "\"fur\"i",
						},
					},
					&actionExpr{
						pos: position{line: 520, col: 6, offset: 14805},
						run: (*parser).callonITEM94,
						expr: &litMatcher{
							pos:        position{line: 520, col: 6, offset: 14805},
							val:        "glasspipe",
							ignoreCase: true,
							want:       "\"glasspipe\"i",
						},
					},
					&actionExpr{
						pos: position{line: 521, col: 6, offset: 14856},
						run: (*parser).callonITEM96,
						expr: &litMatcher{
							pos:        position{line: 521, col: 6, offset: 14856},
							val:        "goats",
							ignoreCase: true,
							want:       "\"goats\"i",
						},
					},
					&actionExpr{
						pos: position{line: 522, col: 6, offset: 14903},
						run: (*parser).callonITEM98,
						expr: &litMatcher{
							pos:        position{line: 522, col: 6, offset: 14903},
							val:        "gold",
							ignoreCase: true,
							want:       "\"gold\"i",
						},
					},
					&actionExpr{
						pos: position{line: 523, col: 6, offset: 14949},
						run: (*parser).callonITEM100,
						expr: &litMatcher{
							pos:        position{line: 523, col: 6, offset: 14949},
							val:        "grain",
							ignoreCase: true,
							want:       "\"grain\"i",
						},
					},
					&actionExpr{
						pos: position{line: 524, col: 6, offset: 14996},
						run: (*parser).callonITEM102,
						expr: &litMatcher{
							pos:        position{line: 524, col: 6, offset: 14996},
							val:        "grape",
							ignoreCase: true,
							want:       "\"grape\"i",
						},
					},
					&actionExpr{
						pos: position{line: 525, col: 6, offset: 15043},
						run: (*parser).callonITEM104,
						expr: &litMatcher{
							pos:        position{line: 525, col: 6, offset: 15043},
							val:        "gut",
							ignoreCase: true,
							want:       "\"gut\"i",
						},
					},
					&actionExpr{
						pos: position{line: 526, col: 6, offset: 15088},
						run: (*parser).callonITEM106,
						expr: &litMatcher{
							pos:        position{line: 526, col: 6, offset: 15088},
							val:        "hbow",
							ignoreCase: true,
							want:       "\"hbow\"i",
						},
					},
					&actionExpr{
						pos: position{line: 527, col: 6, offset: 15134},
						run: (*parser).callonITEM108,
						expr: &litMatcher{
							pos:        position{line: 527, col: 6, offset: 15134},
							val:        "harp",
							ignoreCase: true,
							want:       "\"harp\"i",
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 6, offset: 15180},
						run: (*parser).callonITEM110,
						expr: &litMatcher{
							pos:        position{line: 528, col: 6, offset: 15180},
							val:        "haube",
							ignoreCase: true,
							want:       "\"haube\"i",
						},
					},
					&actionExpr{
						pos: position{line: 529, col: 6, offset: 15227},
						run: (*parser).callonITEM112,
						expr: &litMatcher{
							pos:        position{line: 529, col: 6, offset: 15227},
							val:        "heaters",
							ignoreCase: true,
							want:       "\"heaters\"i",
						},
					},
					&actionExpr{
						pos: position{line: 530, col: 6, offset: 15276},
						run: (*parser).callonITEM114,
						expr: &litMatcher{
							pos:        position{line: 530, col: 6, offset: 15276},
							val:        "helm",
							ignoreCase: true,
							want:       "\"helm\"i",
						},
					},
					&actionExpr{
						pos: position{line: 531, col: 6, offset: 15322},
						run: (*parser).callonITEM116,
						expr: &litMatcher{
							pos:        position{line: 531, col: 6, offset: 15322},
							val:        "herbs",
							ignoreCase: true,
							want:       "\"herbs\"i",
						},
					},
					&actionExpr{
						pos: position{line: 532, col: 6, offset: 15369},
						run: (*parser).callonITEM118,
						expr: &litMatcher{
							pos:        position{line: 532, col: 6, offset: 15369},
							val:        "hive",
							ignoreCase: true,
							want:       "\"hive\"i",
						},
					},
					&actionExpr{
						pos: position{line: 533, col: 6, offset: 15415},
						run: (*parser).callonITEM120,
						expr: &litMatcher{
							pos:        position{line: 533, col: 6, offset: 15415},
							val:        "hoe",
							ignoreCase: true,
							want:       "\"hoe\"i",
						},
					},
					&actionExpr{
						pos: position{line: 534, col: 6, offset: 15460},
						run: (*parser).callonITEM122,
						expr: &litMatcher{
							pos:        position{line: 534, col: 6, offset: 15460},
							val:        "honey",
							ignoreCase: true,
							want:       "\"honey\"i",
						},
					},
					&actionExpr{
						pos: position{line: 535, col: 6, offset: 15507},
						run: (*parser).callonITEM124,
						expr: &litMatcher{
							pos:        position{line: 535, col: 6, offset: 15507},
							val:        "hood",
							ignoreCase: true,
							want:       "\"hood\"i",
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 6, offset: 15553},
						run: (*parser).callonITEM126,
						expr: &litMatcher{
							pos:        position{line: 536, col: 6, offset: 15553},
							val:        "horn",
							ignoreCase: true,
							want:       "\"horn\"i",
						},
					},
					&actionExpr{
						pos: position{line: 537, col: 6, offset: 15599},
						run: (*parser).callonITEM128,
						expr: &litMatcher{
							pos:        position{line: 537, col: 6, offset: 15599},
							val:        "horses",
							ignoreCase: true,
							want:       "\"horses\"i",
						},
					},
					&actionExpr{
						pos: position{line: 538, col: 6, offset: 15647},
						run: (*parser).callonITEM130,
						expr: &litMatcher{
							pos:        position{line: 538, col: 6, offset: 15647},
							val:        "jade",
							ignoreCase: true,
							want:       "\"jade\"i",
						},
					},
					&actionExpr{
						pos: position{line: 539, col: 6, offset: 15693},
						run: (*parser).callonITEM132,
						expr: &litMatcher{
							pos:        position{line: 539, col: 6, offset: 15693},
							val:        "jerkin",
							ignoreCase: true,
							want:       "\"jerkin\"i",
						},
					},
					&actionExpr{
						pos: position{line: 540, col: 6, offset: 15741},
						run: (*parser).callonITEM134,
						expr: &litMatcher{
							pos:        position{line: 540, col: 6, offset: 15741},
							val:        "kayak",
							ignoreCase: true,
							want:       "\"kayak\"i",
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 6, offset: 15788},
						run: (*parser).callonITEM136,
						expr: &litMatcher{
							pos:        position{line: 541, col: 6, offset: 15788},
							val:        "ladder",
							ignoreCase: true,
							want:       "\"ladder\"i",
						},
					},
					&actionExpr{
						pos: position{line: 542, col: 6, offset: 15836},
						run: (*parser).callonITEM138,
						expr: &litMatcher{
							pos:        position{line: 542, col: 6, offset: 15836},
							val:        "leather",
							ignoreCase: true,
							want:       "\"leather\"i",
						},
					},
					&actionExpr{
						pos: position{line: 543, col: 6, offset: 15885},
						run: (*parser).callonITEM140,
						expr: &litMatcher{
							pos:        position{line: 543, col: 6, offset: 15885},
							val:        "logs",
							ignoreCase: true,
							want:       "\"logs\"i",
						},
					},
					&actionExpr{
						pos: position{line: 544, col: 6, offset: 15931},
						run: (*parser).callonITEM142,
						expr: &litMatcher{
							pos:        position{line: 544, col: 6, offset: 15931},
							val:        "lute",
							ignoreCase: true,
							want:       "\"lute\"i",
						},
					},
					&actionExpr{
						pos: position{line: 545, col: 6, offset: 15977},
						run: (*parser).callonITEM144,
						expr: &litMatcher{
							pos:        position{line: 545, col: 6, offset: 15977},
							val:        "mace",
							ignoreCase: true,
							want:       "\"mace\"i",
						},
					},
					&actionExpr{
						pos: position{line: 546, col: 6, offset: 16023},
						run: (*parser).callonITEM146,
						expr: &litMatcher{
							pos:        position{line: 546, col: 6, offset: 16023},
							val:        "mattock",
							ignoreCase: true,
							want:       "\"mattock\"i",
						},
					},
					&actionExpr{
						pos: position{line: 547, col: 6, offset: 16072},
						run: (*parser).callonITEM148,
						expr: &litMatcher{
							pos:        position{line: 547, col: 6, offset: 16072},
							val:        "metal",
							ignoreCase: true,
							want:       "\"metal\"i",
						},
					},
					&actionExpr{
						pos: position{line: 548, col: 6, offset: 16119},
						run: (*parser).callonITEM150,
						expr: &litMatcher{
							pos:        position{line: 548, col: 6, offset: 16119},
							val:        "millstone",
							ignoreCase: true,
							want:       "\"millstone\"i",
						},
					},
					&actionExpr{
						pos: position{line: 549, col: 6, offset: 16170},
						run: (*parser).callonITEM152,
						expr: &litMatcher{
							pos:        position{line: 549, col: 6, offset: 16170},
							val:        "musk",
							ignoreCase: true,
							want:       "\"musk\"i",
						},
					},
					&actionExpr{
						pos: position{line: 550, col: 6, offset: 16216},
						run: (*parser).callonITEM154,
						expr: &litMatcher{
							pos:        position{line: 550, col: 6, offset: 16216},
							val:        "net",
							ignoreCase: true,
							want:       "\"net\"i",
						},
					},
					&actionExpr{
						pos: position{line: 551, col: 6, offset: 16261},
						run: (*parser).callonITEM156,
						expr: &litMatcher{
							pos:        position{line: 551, col: 6, offset: 16261},
							val:        "oar",
							ignoreCase: true,
							want:       "\"oar\"i",
						},
					},
					&actionExpr{
						pos: position{line: 552, col: 6, offset: 16306},
						run: (*parser).callonITEM158,
						expr: &litMatcher{
							pos:        position{line: 552, col: 6, offset: 16306},
							val:        "oil",
							ignoreCase: true,
							want:       "\"oil\"i",
						},
					},
					&actionExpr{
						pos: position{line: 553, col: 6, offset: 16351},
						run: (*parser).callonITEM160,
						expr: &litMatcher{
							pos:        position{line: 553, col: 6, offset: 16351},
							val:        "olives",
							ignoreCase: true,
							want:       "\"olives\"i",
						},
					},
					&actionExpr{
						pos: position{line: 554, col: 6, offset: 16399},
						run: (*parser).callonITEM162,
						expr: &litMatcher{
							pos:        position{line: 554, col: 6, offset: 16399},
							val:        "opium",
							ignoreCase: true,
							want:       "\"opium\"i",
						},
					},
					&actionExpr{
						pos: position{line: 555, col: 6, offset: 16446},
						run: (*parser).callonITEM164,
						expr: &litMatcher{
							pos:        position{line: 555, col: 6, offset: 16446},
							val:        "ores",
							ignoreCase: true,
							want:       "\"ores\"i",
						},
					},
					&actionExpr{
						pos: position{line: 556, col: 6, offset: 16492},
						run: (*parser).callonITEM166,
						expr: &litMatcher{
							pos:        position{line: 556, col: 6, offset: 16492},
							val:        "paddle",
							ignoreCase: true,
							want:       "\"paddle\"i",
						},
					},
					&actionExpr{
						pos: position{line: 557, col: 6, offset: 16540},
						run: (*parser).callonITEM168,
						expr: &litMatcher{
							pos:        position{line: 557, col: 6, offset: 16540},
							val:        "palanquin",
							ignoreCase: true,
							want:       "\"palanquin\"i",
						},
					},
					&actionExpr{
						pos: position{line: 558, col: 6, offset: 16591},
						run: (*parser).callonITEM170,
						expr: &litMatcher{
							pos:        position{line: 558, col: 6, offset: 16591},
							val:        "parchment",
							ignoreCase: true,
							want:       "\"parchment\"i",
						},
					},
					&actionExpr{
						pos: position{line: 559, col: 6, offset: 16642},
						run: (*parser).callonITEM172,
						expr: &litMatcher{
							pos:        position{line: 559, col: 6, offset: 16642},
							val:        "pavis",
							ignoreCase: true,
							want:       "\"pavis\"i",
						},
					},
					&actionExpr{
						pos: position{line: 560, col: 6, offset: 16689},
						run: (*parser).callonITEM174,
						expr: &litMatcher{
							pos:        position{line: 560, col: 6, offset: 16689},
							val:        "pearls",
							ignoreCase: true,
							want:       "\"pearls\"i",
						},
					},
					&actionExpr{
						pos: position{line: 561, col: 6, offset: 16737},
						run: (*parser).callonITEM176,
						expr: &litMatcher{
							pos:        position{line: 561, col: 6, offset: 16737},
							val:        "pellets",
							ignoreCase: true,
							want:       "\"pellets\"i",
						},
					},
					&actionExpr{
						pos: position{line: 562, col: 6, offset: 16786},
						run: (*parser).callonITEM178,
						expr: &litMatcher{
							pos:        position{line: 562, col: 6, offset: 16786},
							val:        "people",
							ignoreCase: true,
							want:       "\"people\"i",
						},
					},
					&actionExpr{
						pos: position{line: 563, col: 6, offset: 16834},
						run: (*parser).callonITEM180,
						expr: &litMatcher{
							pos:        position{line: 563, col: 6, offset: 16834},
							val:        "pewter",
							ignoreCase: true,
							want:       "\"pewter\"i",
						},
					},
					&actionExpr{
						pos: position{line: 564, col: 6, offset: 16882},
						run: (*parser).callonITEM182,
						expr: &litMatcher{
							pos:        position{line: 564, col: 6, offset: 16882},
							val:        "picks",
							ignoreCase: true,
							want:       "\"picks\"i",
						},
					},
					&actionExpr{
						pos: position{line: 565, col: 6, offset: 16929},
						run: (*parser).callonITEM184,
						expr: &litMatcher{
							pos:        position{line: 565, col: 6, offset: 16929},
							val:        "plows",
							ignoreCase: true,
							want:       "\"plows\"i",
						},
					},
					&actionExpr{
						pos: position{line: 566, col: 6, offset: 16976},
						run: (*parser).callonITEM186,
						expr: &litMatcher{
							pos:        position{line: 566, col: 6, offset: 16976},
							val:        "provisions",
							ignoreCase: true,
							want:       "\"provisions\"i",
						},
					},
					&actionExpr{
						pos: position{line: 567, col: 6, offset: 17028},
						run: (*parser).callonITEM188,
						expr: &litMatcher{
							pos:        position{line: 567, col: 6, offset: 17028},
							val:        "quarrel",
							ignoreCase: true,
							want:       "\"quarrel\"i",
						},
					},
					&actionExpr{
						pos: position{line: 568, col: 6, offset: 17077},
						run: (*parser).callonITEM190,
						expr: &litMatcher{
							pos:        position{line: 568, col: 6, offset: 17077},
							val:        "rake",
							ignoreCase: true,
							want:       "\"rake\"i",
						},
					},
					&actionExpr{
						pos: position{line: 569, col: 6, offset: 17123},
						run: (*parser).callonITEM192,
						expr: &litMatcher{
							pos:        position{line: 569, col: 6, offset: 17123},
							val:        "ram",
							ignoreCase: true,
							want:       "\"ram\"i",
						},
					},
					&actionExpr{
						pos: position{line: 570, col: 6, offset: 17168},
						run: (*parser).callonITEM194,
						expr: &litMatcher{
							pos:        position{line: 570, col: 6, offset: 17168},
							val:        "ramp",
							ignoreCase: true,
							want:       "\"ramp\"i",
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 6, offset: 17214},
						run: (*parser).callonITEM196,
						expr: &litMatcher{
							pos:        position{line: 571, col: 6, offset: 17214},
							val:        "ring",
							ignoreCase: true,
							want:       "\"ring\"i",
						},
					},
					&actionExpr{
						pos: position{line: 572, col: 6, offset: 17260},
						run: (*parser).callonITEM198,
						expr: &litMatcher{
							pos:        position{line: 572, col: 6, offset: 17260},
							val:        "rope",
							ignoreCase: true,
							want:       "\"rope\"i",
						},
					},
					&actionExpr{
						pos: position{line: 573, col: 6, offset: 17306},
						run: (*parser).callonITEM200,
						expr: &litMatcher{
							pos:        position{line: 573, col: 6, offset: 17306},
							val:        "rug",
							ignoreCase: true,
							want:       "\"rug\"i",
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 6, offset: 17351},
						run: (*parser).callonITEM202,
						expr: &litMatcher{
							pos:        position{line: 574, col: 6, offset: 17351},
							val:        "saddle",
							ignoreCase: true,
							want:       "\"saddle\"i",
						},
					},
					&actionExpr{
						pos: position{line: 575, col: 6, offset: 17399},
						run: (*parser).callonITEM204,
						expr: &litMatcher{
							pos:        position{line: 575, col: 6, offset: 17399},
							val:        "saddlebag",
							ignoreCase: true,
							want:       "\"saddlebag\"i",
						},
					},
					&actionExpr{
						pos: position{line: 576, col: 6, offset: 17450},
						run: (*parser).callonITEM206,
						expr: &litMatcher{
							pos:        position{line: 576, col: 6, offset: 17450},
							val:        "salt",
							ignoreCase: true,
							want:       "\"salt\"i",
						},
					},
					&actionExpr{
						pos: position{line: 577, col: 6, offset: 17496},
						run: (*parser).callonITEM208,
						expr: &litMatcher{
							pos:        position{line: 577, col: 6, offset: 17496},
							val:        "sand",
							ignoreCase: true,
							want:       "\"sand\"i",
						},
					},
					&actionExpr{
						pos: position{line: 578, col: 6, offset: 17542},
						run: (*parser).callonITEM210,
						expr: &litMatcher{
							pos:        position{line: 578, col: 6, offset: 17542},
							val:        "scale",
							ignoreCase: true,
							want:       "\"scale\"i",
						},
					},
					&actionExpr{
						pos: position{line: 579, col: 6, offset: 17589},
						run: (*parser).callonITEM212,
						expr: &litMatcher{
							pos:        position{line: 579, col: 6, offset: 17589},
							val:        "sculpture",
							ignoreCase: true,
							want:       "\"sculpture\"i",
						},
					},
					&actionExpr{
						pos: position{line: 580, col: 6, offset: 17640},
						run: (*parser).callonITEM214,
						expr: &litMatcher{
							pos:        position{line: 580, col: 6, offset: 17640},
							val:        "scutum",
							ignoreCase: true,
							want:       "\"scutum\"i",
						},
					},
					&actionExpr{
						pos: position{line: 581, col: 6, offset: 17688},
						run: (*parser).callonITEM216,
						expr: &litMatcher{
							pos:        position{line: 581, col: 6, offset: 17688},
							val:        "scythe",
							ignoreCase: true,
							want:       "\"scythe\"i",
						},
					},
					&actionExpr{
						pos: position{line: 582, col: 6, offset: 17736},
						run: (*parser).callonITEM218,
						expr: &litMatcher{
							pos:        position{line: 582, col: 6, offset: 17736},
							val:        "shackle",
							ignoreCase: true,
							want:       "\"shackle\"i",
						},
					},
					&actionExpr{
						pos: position{line: 583, col: 6, offset: 17785},
						run: (*parser).callonITEM220,
						expr: &litMatcher{
							pos:        position{line: 583, col: 6, offset: 17785},
							val:        "shaft",
							ignoreCase: true,
							want:       "\"shaft\"i",
						},
					},
					&actionExpr{
						pos: position{line: 584, col: 6, offset: 17832},
						run: (*parser).callonITEM222,
						expr: &litMatcher{
							pos:        position{line: 584, col: 6, offset: 17832},
							val:        "shield",
							ignoreCase: true,
							want:       "\"shield\"i",
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 6, offset: 17880},
						run: (*parser).callonITEM224,
						expr: &litMatcher{
							pos:        position{line: 585, col: 6, offset: 17880},
							val:        "shovel",
							ignoreCase: true,
							want:       "\"shovel\"i",
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 6, offset: 17928},
						run: (*parser).callonITEM226,
						expr: &litMatcher{
							pos:        position{line: 586, col: 6, offset: 17928},
							val:        "silk",
							ignoreCase: true,
							want:       "\"silk\"i",
						},
					},
					&actionExpr{
						pos: position{line: 587, col: 6, offset: 17974},
						run: (*parser).callonITEM228,
						expr: &litMatcher{
							pos:        position{line: 587, col: 6, offset: 17974},
							val:        "silver",
							ignoreCase: true,
							want:       "\"silver\"i",
						},
					},
					&actionExpr{
						pos: position{line: 588, col: 6, offset: 18022},
						run: (*parser).callonITEM230,
						expr: &litMatcher{
							pos:        position{line: 588, col: 6, offset: 18022},
							val:        "skin",
							ignoreCase: true,
							want:       "\"skin\"i",
						},
					},
					&actionExpr{
						pos: position{line: 589, col: 6, offset: 18068},
						run: (*parser).callonITEM232,
						expr: &litMatcher{
							pos:        position{line: 589, col: 6, offset: 18068},
							val:        "slaves",
							ignoreCase: true,
							want:       "\"slaves\"i",
						},
					},
					&actionExpr{
						pos: position{line: 590, col: 6, offset: 18116},
						run: (*parser).callonITEM234,
						expr: &litMatcher{
							pos:        position{line: 590, col: 6, offset: 18116},
							val:        "slings",
							ignoreCase: true,
							want:       "\"slings\"i",
						},
					},
					&actionExpr{
						pos: position{line: 591, col: 6, offset: 18164},
						run: (*parser).callonITEM236,
						expr: &litMatcher{
							pos:        position{line: 591, col: 6, offset: 18164},
							val:        "snare",
							ignoreCase: true,
							want:       "\"snare\"i",
						},
					},
					&actionExpr{
						pos: position{line: 592, col: 6, offset: 18211},
						run: (*parser).callonITEM238,
						expr: &litMatcher{
							pos:        position{line: 592, col: 6, offset: 18211},
							val:        "spear",
							ignoreCase: true,
							want:       "\"spear\"i",
						},
					},
					&actionExpr{
						pos: position{line: 593, col: 6, offset: 18258},
						run: (*parser).callonITEM240,
						expr: &litMatcher{
							pos:        position{line: 593, col: 6, offset: 18258},
							val:        "spetum",
							ignoreCase: true,
							want:       "\"spetum\"i",
						},
					},
					&actionExpr{
						pos: position{line: 594, col: 6, offset: 18306},
						run: (*parser).callonITEM242,
						expr: &litMatcher{
							pos:        position{line: 594, col: 6, offset: 18306},
							val:        "spice",
							ignoreCase: true,
							want:       "\"spice\"i",
						},
					},
					&actionExpr{
						pos: position{line: 595, col: 6, offset: 18353},
						run: (*parser).callonITEM244,
						expr: &litMatcher{
							pos:        position{line: 595, col: 6, offset: 18353},
							val:        "statue",
							ignoreCase: true,
							want:       "\"statue\"i",
						},
					},
					&actionExpr{
						pos: position{line: 596, col: 6, offset: 18401},
						run: (*parser).callonITEM246,
						expr: &litMatcher{
							pos:        position{line: 596, col: 6, offset: 18401},
							val:        "stave",
							ignoreCase: true,
							want:       "\"stave\"i",
						},
					},
					&actionExpr{
						pos: position{line: 597, col: 6, offset: 18448},
						run: (*parser).callonITEM248,
						expr: &litMatcher{
							pos:        position{line: 597, col: 6, offset: 18448},
							val:        "stones",
							ignoreCase: true,
							want:       "\"stones\"i",
						},
					},
					&actionExpr{
						pos: position{line: 598, col: 6, offset: 18496},
						run: (*parser).callonITEM250,
						expr: &litMatcher{
							pos:        position{line: 598, col: 6, offset: 18496},
							val:        "string",
							ignoreCase: true,
							want:       "\"string\"i",
						},
					},
					&actionExpr{
						pos: position{line: 599, col: 6, offset: 18544},
						run: (*parser).callonITEM252,
						expr: &litMatcher{
							pos:        position{line: 599, col: 6, offset: 18544},
							val:        "sugar",
							ignoreCase: true,
							want:       "\"sugar\"i",
						},
					},
					&actionExpr{
						pos: position{line: 600, col: 6, offset: 18591},
						run: (*parser).callonITEM254,
						expr: &litMatcher{
							pos:        position{line: 600, col: 6, offset: 18591},
							val:        "sword",
							ignoreCase: true,
							want:       "\"sword\"i",
						},
					},
					&actionExpr{
						pos: position{line: 601, col: 6, offset: 18638},
						run: (*parser).callonITEM256,
						expr: &litMatcher{
							pos:        position{line: 601, col: 6, offset: 18638},
							val:        "tapestries",
							ignoreCase: true,
							want:       "\"tapestries\"i",
						},
					},
					&actionExpr{
						pos: position{line: 602, col: 6, offset: 18690},
						run: (*parser).callonITEM258,
						expr: &litMatcher{
							pos:        position{line: 602, col: 6, offset: 18690},
							val:        "tea",
							ignoreCase: true,
							want:       "\"tea\"i",
						},
					},
					&actionExpr{
						pos: position{line: 603, col: 6, offset: 18735},
						run: (*parser).callonITEM260,
						expr: &litMatcher{
							pos:        position{line: 603, col: 6, offset: 18735},
							val:        "tobacco",
							ignoreCase: true,
							want:       "\"tobacco\"i",
						},
					},
					&actionExpr{
						pos: position{line: 604, col: 6, offset: 18784},
						run: (*parser).callonITEM262,
						expr: &litMatcher{
							pos:        position{line: 604, col: 6, offset: 18784},
							val:        "trap",
							ignoreCase: true,
							want:       "\"trap\"i",
						},
					},
					&actionExpr{
						pos: position{line: 605, col: 6, offset: 18830},
						run: (*parser).callonITEM264,
						expr: &litMatcher{
							pos:        position{line: 605, col: 6, offset: 18830},
							val:        "trews",
							ignoreCase: true,
							want:       "\"trews\"i",
						},
					},
					&actionExpr{
						pos: position{line: 606, col: 6, offset: 18877},
						run: (*parser).callonITEM266,
						expr: &litMatcher{
							pos:        position{line: 606, col: 6, offset: 18877},
							val:        "trinket",
							ignoreCase: true,
							want:       "\"trinket\"i",
						},
					},
					&actionExpr{
						pos: position{line: 607, col: 6, offset: 18926},
						run: (*parser).callonITEM268,
						expr: &litMatcher{
							pos:        position{line: 607, col: 6, offset: 18926},
							val:        "trumpet",
							ignoreCase: true,
							want:       "\"trumpet\"i",
						},
					},
					&actionExpr{
						pos: position{line: 608, col: 6, offset: 18975},
						run: (*parser).callonITEM270,
						expr: &litMatcher{
							pos:        position{line: 608, col: 6, offset: 18975},
							val:        "urn",
							ignoreCase: true,
							want:       "\"urn\"i",
						},
					},
					&actionExpr{
						pos: position{line: 609, col: 6, offset: 19020},
						run: (*parser).callonITEM272,
						expr: &litMatcher{
							pos:        position{line: 609, col: 6, offset: 19020},
							val:        "wagons",
							ignoreCase: true,
							want:       "\"wagons\"i",
						},
					},
					&actionExpr{
						pos: position{line: 610, col: 6, offset: 19068},
						run: (*parser).callonITEM274,
						expr: &litMatcher{
							pos:        position{line: 610, col: 6, offset: 19068},
							val:        "wax",
							ignoreCase: true,
							want:       "\"wax\"i",
						},
					},
				},
			},
		},
		{
			name: "MONTH",
			pos:  position{line: 612, col: 1, offset: 19110},
			expr: &actionExpr{
				pos: position{line: 612, col: 10, offset: 19119},
				run: (*parser).callonMONTH1,
				expr: &seqExpr{
					pos: position{line: 612, col: 10, offset: 19119},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 612, col: 10, offset: 19119},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 612, col: 16, offset: 19125},
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 16, offset: 19125},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 617, col: 1, offset: 19201},
			expr: &actionExpr{
				pos: position{line: 617, col: 11, offset: 19211},
				run: (*parser).callonNUMBER1,
				expr: &oneOrMoreExpr{
					pos: position{line: 617, col: 11, offset: 19211},
					expr: &charClassMatcher{
						pos:        position{line: 617, col: 11, offset: 19211},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "RESOURCE",
			pos:  position{line: 622, col: 1, offset: 19287},
			expr: &choiceExpr{
				pos: position{line: 622, col: 13, offset: 19299},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 622, col: 13, offset: 19299},
						run: (*parser).callonRESOURCE2,
						expr: &litMatcher{
							pos:        position{line: 622, col: 13, offset: 19299},
							val:        "coal",
							ignoreCase: true,
							want:       "\"Coal\"i",
						},
					},
					&actionExpr{
						pos: position{line: 624, col: 5, offset: 19344},
						run: (*parser).callonRESOURCE4,
						expr: &litMatcher{
							pos:        position{line: 624, col: 5, offset: 19344},
							val:        "copper ore",
							ignoreCase: true,
							want:       "\"Copper Ore\"i",
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 19400},
						run: (*parser).callonRESOURCE6,
						expr: &litMatcher{
							pos:        position{line: 626, col: 5, offset: 19400},
							val:        "diamond",
							ignoreCase: true,
							want:       "\"Diamond\"i",
						},
					},
					&actionExpr{
						pos: position{line: 628, col: 5, offset: 19451},
						run: (*parser).callonRESOURCE8,
						expr: &litMatcher{
							pos:        position{line: 628, col: 5, offset: 19451},
							val:        "frankincense",
							ignoreCase: true,
							want:       "\"Frankincense\"i",
						},
					},
					&actionExpr{
						pos: position{line: 630, col: 5, offset: 19512},
						run: (*parser).callonRESOURCE10,
						expr: &litMatcher{
							pos:        position{line: 630, col: 5, offset: 19512},
							val:        "gold",
							ignoreCase: true,
							want:       "\"Gold\"i",
						},
					},
					&actionExpr{
						pos: position{line: 632, col: 5, offset: 19557},
						run: (*parser).callonRESOURCE12,
						expr: &litMatcher{
							pos:        position{line: 632, col: 5, offset: 19557},
							val:        "iron ore",
							ignoreCase: true,
							want:       "\"Iron Ore\"i",
						},
					},
					&actionExpr{
						pos: position{line: 634, col: 5, offset: 19609},
						run: (*parser).callonRESOURCE14,
						expr: &litMatcher{
							pos:        position{line: 634, col: 5, offset: 19609},
							val:        "jade",
							ignoreCase: true,
							want:       "\"Jade\"i",
						},
					},
					&actionExpr{
						pos: position{line: 636, col: 5, offset: 19654},
						run: (*parser).callonRESOURCE16,
						expr: &litMatcher{
							pos:        position{line: 636, col: 5, offset: 19654},
							val:        "kaolin",
							ignoreCase: true,
							want:       "\"Kaolin\"i",
						},
					},
					&actionExpr{
						pos: position{line: 638, col: 5, offset: 19703},
						run: (*parser).callonRESOURCE18,
						expr: &litMatcher{
							pos:        position{line: 638, col: 5, offset: 19703},
							val:        "lead ore",
							ignoreCase: true,
							want:       "\"Lead Ore\"i",
						},
					},
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 19755},
						run: (*parser).callonRESOURCE20,
						expr: &litMatcher{
							pos:        position{line: 640, col: 5, offset: 19755},
							val:        "limestone",
							ignoreCase: true,
							want:       "\"Limestone\"i",
						},
					},
					&actionExpr{
						pos: position{line: 642, col: 5, offset: 19810},
						run: (*parser).callonRESOURCE22,
						expr: &litMatcher{
							pos:        position{line: 642, col: 5, offset: 19810},
							val:        "nickel ore",
							ignoreCase: true,
							want:       "\"Nickel Ore\"i",
						},
					},
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 19866},
						run: (*parser).callonRESOURCE24,
						expr: &litMatcher{
							pos:        position{line: 644, col: 5, offset: 19866},
							val:        "pearls",
							ignoreCase: true,
							want:       "\"Pearls\"i",
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 5, offset: 19915},
						run: (*parser).callonRESOURCE26,
						expr: &litMatcher{
							pos:        position{line: 646, col: 5, offset: 19915},
							val:        "pyrite",
							ignoreCase: true,
							want:       "\"Pyrite\"i",
						},
					},
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 19964},
						run: (*parser).callonRESOURCE28,
						expr: &litMatcher{
							pos:        position{line: 648, col: 5, offset: 19964},
							val:        "rubies",
							ignoreCase: true,
							want:       "\"Rubies\"i",
						},
					},
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 20013},
						run: (*parser).callonRESOURCE30,
						expr: &litMatcher{
							pos:        position{line: 650, col: 5, offset: 20013},
							val:        "salt",
							ignoreCase: true,
							want:       "\"Salt\"i",
						},
					},
					&actionExpr{
						pos: position{line: 652, col: 5, offset: 20058},
						run: (*parser).callonRESOURCE32,
						expr: &litMatcher{
							pos:        position{line: 652, col: 5, offset: 20058},
							val:        "silver",
							ignoreCase: true,
							want:       "\"Silver\"i",
						},
					},
					&actionExpr{
						pos: position{line: 654, col: 5, offset: 20107},
						run: (*parser).callonRESOURCE34,
						expr: &litMatcher{
							pos:        position{line: 654, col: 5, offset: 20107},
							val:        "sulphur",
							ignoreCase: true,
							want:       "\"Sulphur\"i",
						},
					},
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 20158},
						run: (*parser).callonRESOURCE36,
						expr: &litMatcher{
							pos:        position{line: 656, col: 5, offset: 20158},
							val:        "tin ore",
							ignoreCase: true,
							want:       "\"Tin Ore\"i",
						},
					},
					&actionExpr{
						pos: position{line: 658, col: 5, offset: 20208},
						run: (*parser).callonRESOURCE38,
						expr: &litMatcher{
							pos:        position{line: 658, col: 5, offset: 20208},
							val:        "vanadium ore",
							ignoreCase: true,
							want:       "\"Vanadium Ore\"i",
						},
					},
					&actionExpr{
						pos: position{line: 660, col: 5, offset: 20268},
						run: (*parser).callonRESOURCE40,
						expr: &litMatcher{
							pos:        position{line: 660, col: 5, offset: 20268},
							val:        "zinc ore",
							ignoreCase: true,
							want:       "\"Zinc Ore\"i",
						},
					},
				},
			},
		},
		{
			name: "TERRAIN",
			pos:  position{line: 664, col: 1, offset: 20319},
			expr: &choiceExpr{
				pos: position{line: 664, col: 12, offset: 20330},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 664, col: 12, offset: 20330},
						run: (*parser).callonTERRAIN2,
						expr: &litMatcher{
							pos:        position{line: 664, col: 12, offset: 20330},
							val:        "ALPS",
							ignoreCase: false,
							want:       "\"ALPS\"",
						},
					},
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 20372},
						run: (*parser).callonTERRAIN4,
						expr: &litMatcher{
							pos:        position{line: 666, col: 5, offset: 20372},
							val:        "ARID HILLS",
							ignoreCase: false,
							want:       "\"ARID HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 20425},
						run: (*parser).callonTERRAIN6,
						expr: &litMatcher{
							pos:        position{line: 668, col: 5, offset: 20425},
							val:        "ARID TUNDRA",
							ignoreCase: false,
							want:       "\"ARID TUNDRA\"",
						},
					},
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 20480},
						run: (*parser).callonTERRAIN8,
						expr: &litMatcher{
							pos:        position{line: 670, col: 5, offset: 20480},
							val:        "ARID",
							ignoreCase: false,
							want:       "\"ARID\"",
						},
					},
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 20528},
						run: (*parser).callonTERRAIN10,
						expr: &litMatcher{
							pos:        position{line: 672, col: 5, offset: 20528},
							val:        "BRUSH FLAT",
							ignoreCase: false,
							want:       "\"BRUSH FLAT\"",
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 20581},
						run: (*parser).callonTERRAIN12,
						expr: &litMatcher{
							pos:        position{line: 674, col: 5, offset: 20581},
							val:        "BRUSH HILLS",
							ignoreCase: false,
							want:       "\"BRUSH HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 20636},
						run: (*parser).callonTERRAIN14,
						expr: &litMatcher{
							pos:        position{line: 676, col: 5, offset: 20636},
							val:        "BRUSH",
							ignoreCase: false,
							want:       "\"BRUSH\"",
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 20684},
						run: (*parser).callonTERRAIN16,
						expr: &litMatcher{
							pos:        position{line: 678, col: 5, offset: 20684},
							val:        "CONIFER HILLS",
							ignoreCase: false,
							want:       "\"CONIFER HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 680, col: 5, offset: 20743},
						run: (*parser).callonTERRAIN18,
						expr: &litMatcher{
							pos:        position{line: 680, col: 5, offset: 20743},
							val:        "DECIDUOUS FOREST",
							ignoreCase: false,
							want:       "\"DECIDUOUS FOREST\"",
						},
					},
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 20802},
						run: (*parser).callonTERRAIN20,
						expr: &litMatcher{
							pos:        position{line: 682, col: 5, offset: 20802},
							val:        "DECIDUOUS HILLS",
							ignoreCase: false,
							want:       "\"DECIDUOUS HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 684, col: 5, offset: 20865},
						run: (*parser).callonTERRAIN22,
						expr: &litMatcher{
							pos:        position{line: 684, col: 5, offset: 20865},
							val:        "DECIDUOUS",
							ignoreCase: false,
							want:       "\"DECIDUOUS\"",
						},
					},
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 20917},
						run: (*parser).callonTERRAIN24,
						expr: &litMatcher{
							pos:        position{line: 686, col: 5, offset: 20917},
							val:        "DESERT",
							ignoreCase: false,
							want:       "\"DESERT\"",
						},
					},
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 20963},
						run: (*parser).callonTERRAIN26,
						expr: &litMatcher{
							pos:        position{line: 688, col: 5, offset: 20963},
							val:        "GRASSY HILLS PLATEAU",
							ignoreCase: false,
							want:       "\"GRASSY HILLS PLATEAU\"",
						},
					},
					&actionExpr{
						pos: position{line: 690, col: 5, offset: 21035},
						run: (*parser).callonTERRAIN28,
						expr: &litMatcher{
							pos:        position{line: 690, col: 5, offset: 21035},
							val:        "GRASSY HILLS",
							ignoreCase: false,
							want:       "\"GRASSY HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 692, col: 5, offset: 21092},
						run: (*parser).callonTERRAIN30,
						expr: &litMatcher{
							pos:        position{line: 692, col: 5, offset: 21092},
							val:        "HIGH SNOWY MOUNTAINS",
							ignoreCase: false,
							want:       "\"HIGH SNOWY MOUNTAINS\"",
						},
					},
					&actionExpr{
						pos: position{line: 694, col: 5, offset: 21164},
						run: (*parser).callonTERRAIN32,
						expr: &litMatcher{
							pos:        position{line: 694, col: 5, offset: 21164},
							val:        "JUNGLE HILLS",
							ignoreCase: false,
							want:       "\"JUNGLE HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 21221},
						run: (*parser).callonTERRAIN34,
						expr: &litMatcher{
							pos:        position{line: 696, col: 5, offset: 21221},
							val:        "JUNGLE",
							ignoreCase: false,
							want:       "\"JUNGLE\"",
						},
					},
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 21267},
						run: (*parser).callonTERRAIN36,
						expr: &litMatcher{
							pos:        position{line: 698, col: 5, offset: 21267},
							val:        "LAKE",
							ignoreCase: false,
							want:       "\"LAKE\"",
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 21309},
						run: (*parser).callonTERRAIN38,
						expr: &litMatcher{
							pos:        position{line: 700, col: 5, offset: 21309},
							val:        "LOW ARID MOUNTAINS",
							ignoreCase: false,
							want:       "\"LOW ARID MOUNTAINS\"",
						},
					},
					&actionExpr{
						pos: position{line: 702, col: 5, offset: 21377},
						run: (*parser).callonTERRAIN40,
						expr: &litMatcher{
							pos:        position{line: 702, col: 5, offset: 21377},
							val:        "LOW CONIFER MOUNTAINS",
							ignoreCase: false,
							want:       "\"LOW CONIFER MOUNTAINS\"",
						},
					},
					&actionExpr{
						pos: position{line: 704, col: 5, offset: 21451},
						run: (*parser).callonTERRAIN42,
						expr: &litMatcher{
							pos:        position{line: 704, col: 5, offset: 21451},
							val:        "LOW JUNGLE MOUNTAINS",
							ignoreCase: false,
							want:       "\"LOW JUNGLE MOUNTAINS\"",
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 21523},
						run: (*parser).callonTERRAIN44,
						expr: &litMatcher{
							pos:        position{line: 706, col: 5, offset: 21523},
							val:        "LOW SNOWY MOUNTAINS",
							ignoreCase: false,
							want:       "\"LOW SNOWY MOUNTAINS\"",
						},
					},
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 21593},
						run: (*parser).callonTERRAIN46,
						expr: &litMatcher{
							pos:        position{line: 708, col: 5, offset: 21593},
							val:        "LOW VOLCANIC MOUNTAINS",
							ignoreCase: false,
							want:       "\"LOW VOLCANIC MOUNTAINS\"",
						},
					},
					&actionExpr{
						pos: position{line: 710, col: 5, offset: 21669},
						run: (*parser).callonTERRAIN48,
						expr: &litMatcher{
							pos:        position{line: 710, col: 5, offset: 21669},
							val:        "LOW VOLCANO MOUNTAINS",
							ignoreCase: false,
							want:       "\"LOW VOLCANO MOUNTAINS\"",
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 21744},
						run: (*parser).callonTERRAIN50,
						expr: &litMatcher{
							pos:        position{line: 712, col: 5, offset: 21744},
							val:        "OCEAN",
							ignoreCase: false,
							want:       "\"OCEAN\"",
						},
					},
					&actionExpr{
						pos: position{line: 714, col: 5, offset: 21788},
						run: (*parser).callonTERRAIN52,
						expr: &litMatcher{
							pos:        position{line: 714, col: 5, offset: 21788},
							val:        "PLATEAU GRASSY HILLS",
							ignoreCase: false,
							want:       "\"PLATEAU GRASSY HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 21860},
						run: (*parser).callonTERRAIN54,
						expr: &litMatcher{
							pos:        position{line: 716, col: 5, offset: 21860},
							val:        "PLATEAU PRAIRIE",
							ignoreCase: false,
							want:       "\"PLATEAU PRAIRIE\"",
						},
					},
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 21923},
						run: (*parser).callonTERRAIN56,
						expr: &litMatcher{
							pos:        position{line: 718, col: 5, offset: 21923},
							val:        "POLAR ICE",
							ignoreCase: false,
							want:       "\"POLAR ICE\"",
						},
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 21974},
						run: (*parser).callonTERRAIN58,
						expr: &litMatcher{
							pos:        position{line: 720, col: 5, offset: 21974},
							val:        "PRAIRIE",
							ignoreCase: false,
							want:       "\"PRAIRIE\"",
						},
					},
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 22022},
						run: (*parser).callonTERRAIN60,
						expr: &litMatcher{
							pos:        position{line: 722, col: 5, offset: 22022},
							val:        "ROCKY HILLS",
							ignoreCase: false,
							want:       "\"ROCKY HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 22077},
						run: (*parser).callonTERRAIN62,
						expr: &litMatcher{
							pos:        position{line: 724, col: 5, offset: 22077},
							val:        "SNOWY HILLS",
							ignoreCase: false,
							want:       "\"SNOWY HILLS\"",
						},
					},
					&actionExpr{
						pos: position{line: 726, col: 5, offset: 22132},
						run: (*parser).callonTERRAIN64,
						expr: &litMatcher{
							pos:        position{line: 726, col: 5, offset: 22132},
							val:        "SWAMP",
							ignoreCase: false,
							want:       "\"SWAMP\"",
						},
					},
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 22176},
						run: (*parser).callonTERRAIN66,
						expr: &litMatcher{
							pos:        position{line: 728, col: 5, offset: 22176},
							val:        "TUNDRA",
							ignoreCase: false,
							want:       "\"TUNDRA\"",
						},
					},
				},
			},
		},
		{
			name: "TERRAIN_CODE",
			pos:  position{line: 732, col: 1, offset: 22221},
			expr: &choiceExpr{
				pos: position{line: 732, col: 17, offset: 22237},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 732, col: 17, offset: 22237},
						run: (*parser).callonTERRAIN_CODE2,
						expr: &litMatcher{
							pos:        position{line: 732, col: 17, offset: 22237},
							val:        "ALPS",
							ignoreCase: false,
							want:       "\"ALPS\"",
						},
					},
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 22275},
						run: (*parser).callonTERRAIN_CODE4,
						expr: &litMatcher{
							pos:        position{line: 733, col: 5, offset: 22275},
							val:        "GHP",
							ignoreCase: false,
							want:       "\"GHP\"",
						},
					},
					&actionExpr{
						pos: position{line: 734, col: 5, offset: 22326},
						run: (*parser).callonTERRAIN_CODE6,
						expr: &litMatcher{
							pos:        position{line: 734, col: 5, offset: 22326},
							val:        "HSM",
							ignoreCase: false,
							want:       "\"HSM\"",
						},
					},
					&actionExpr{
						pos: position{line: 735, col: 5, offset: 22377},
						run: (*parser).callonTERRAIN_CODE8,
						expr: &litMatcher{
							pos:        position{line: 735, col: 5, offset: 22377},
							val:        "LAM",
							ignoreCase: false,
							want:       "\"LAM\"",
						},
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 22426},
						run: (*parser).callonTERRAIN_CODE10,
						expr: &litMatcher{
							pos:        position{line: 736, col: 5, offset: 22426},
							val:        "LCM",
							ignoreCase: false,
							want:       "\"LCM\"",
						},
					},
					&actionExpr{
						pos: position{line: 737, col: 5, offset: 22478},
						run: (*parser).callonTERRAIN_CODE12,
						expr: &litMatcher{
							pos:        position{line: 737, col: 5, offset: 22478},
							val:        "LJM",
							ignoreCase: false,
							want:       "\"LJM\"",
						},
					},
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 22529},
						run: (*parser).callonTERRAIN_CODE14,
						expr: &litMatcher{
							pos:        position{line: 738, col: 5, offset: 22529},
							val:        "LSM",
							ignoreCase: false,
							want:       "\"LSM\"",
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 22579},
						run: (*parser).callonTERRAIN_CODE16,
						expr: &litMatcher{
							pos:        position{line: 739, col: 5, offset: 22579},
							val:        "LVM",
							ignoreCase: false,
							want:       "\"LVM\"",
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 22632},
						run: (*parser).callonTERRAIN_CODE18,
						expr: &litMatcher{
							pos:        position{line: 740, col: 5, offset: 22632},
							val:        "PGH",
							ignoreCase: false,
							want:       "\"PGH\"",
						},
					},
					&actionExpr{
						pos: position{line: 741, col: 5, offset: 22683},
						run: (*parser).callonTERRAIN_CODE20,
						expr: &litMatcher{
							pos:        position{line: 741, col: 5, offset: 22683},
							val:        "PPR",
							ignoreCase: false,
							want:       "\"PPR\"",
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 22730},
						run: (*parser).callonTERRAIN_CODE22,
						expr: &litMatcher{
							pos:        position{line: 742, col: 5, offset: 22730},
							val:        "AH",
							ignoreCase: false,
							want:       "\"AH\"",
						},
					},
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 22771},
						run: (*parser).callonTERRAIN_CODE24,
						expr: &litMatcher{
							pos:        position{line: 743, col: 5, offset: 22771},
							val:        "AR",
							ignoreCase: false,
							want:       "\"AR\"",
						},
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 22813},
						run: (*parser).callonTERRAIN_CODE26,
						expr: &litMatcher{
							pos:        position{line: 744, col: 5, offset: 22813},
							val:        "BF",
							ignoreCase: false,
							want:       "\"BF\"",
						},
					},
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 22854},
						run: (*parser).callonTERRAIN_CODE28,
						expr: &litMatcher{
							pos:        position{line: 745, col: 5, offset: 22854},
							val:        "BH",
							ignoreCase: false,
							want:       "\"BH\"",
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 22896},
						run: (*parser).callonTERRAIN_CODE30,
						expr: &litMatcher{
							pos:        position{line: 746, col: 5, offset: 22896},
							val:        "CH",
							ignoreCase: false,
							want:       "\"CH\"",
						},
					},
					&actionExpr{
						pos: position{line: 747, col: 5, offset: 22940},
						run: (*parser).callonTERRAIN_CODE32,
						expr: &litMatcher{
							pos:        position{line: 747, col: 5, offset: 22940},
							val:        "DE",
							ignoreCase: false,
							want:       "\"DE\"",
						},
					},
					&actionExpr{
						pos: position{line: 748, col: 5, offset: 22978},
						run: (*parser).callonTERRAIN_CODE34,
						expr: &litMatcher{
							pos:        position{line: 748, col: 5, offset: 22978},
							val:        "DH",
							ignoreCase: false,
							want:       "\"DH\"",
						},
					},
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 23024},
						run: (*parser).callonTERRAIN_CODE36,
						expr: &litMatcher{
							pos:        position{line: 749, col: 5, offset: 23024},
							val:        "GH",
							ignoreCase: false,
							want:       "\"GH\"",
						},
					},
					&actionExpr{
						pos: position{line: 750, col: 5, offset: 23067},
						run: (*parser).callonTERRAIN_CODE38,
						expr: &litMatcher{
							pos:        position{line: 750, col: 5, offset: 23067},
							val:        "JG",
							ignoreCase: false,
							want:       "\"JG\"",
						},
					},
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 23105},
						run: (*parser).callonTERRAIN_CODE40,
						expr: &litMatcher{
							pos:        position{line: 751, col: 5, offset: 23105},
							val:        "JH",
							ignoreCase: false,
							want:       "\"JH\"",
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 5, offset: 23148},
						run: (*parser).callonTERRAIN_CODE42,
						expr: &litMatcher{
							pos:        position{line: 752, col: 5, offset: 23148},
							val:        "PI",
							ignoreCase: false,
							want:       "\"PI\"",
						},
					},
					&actionExpr{
						pos: position{line: 753, col: 5, offset: 23188},
						run: (*parser).callonTERRAIN_CODE44,
						expr: &litMatcher{
							pos:        position{line: 753, col: 5, offset: 23188},
							val:        "PR",
							ignoreCase: false,
							want:       "\"PR\"",
						},
					},
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 23227},
						run: (*parser).callonTERRAIN_CODE46,
						expr: &litMatcher{
							pos:        position{line: 754, col: 5, offset: 23227},
							val:        "RH",
							ignoreCase: false,
							want:       "\"RH\"",
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 23269},
						run: (*parser).callonTERRAIN_CODE48,
						expr: &litMatcher{
							pos:        position{line: 755, col: 5, offset: 23269},
							val:        "SH",
							ignoreCase: false,
							want:       "\"SH\"",
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 23311},
						run: (*parser).callonTERRAIN_CODE50,
						expr: &litMatcher{
							pos:        position{line: 756, col: 5, offset: 23311},
							val:        "SW",
							ignoreCase: false,
							want:       "\"SW\"",
						},
					},
					&actionExpr{
						pos: position{line: 757, col: 5, offset: 23348},
						run: (*parser).callonTERRAIN_CODE52,
						expr: &litMatcher{
							pos:        position{line: 757, col: 5, offset: 23348},
							val:        "TU",
							ignoreCase: false,
							want:       "\"TU\"",
						},
					},
					&actionExpr{
						pos: position{line: 758, col: 5, offset: 23386},
						run: (*parser).callonTERRAIN_CODE54,
						expr: &litMatcher{
							pos:        position{line: 758, col: 5, offset: 23386},
							val:        "D",
							ignoreCase: false,
							want:       "\"D\"",
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 23426},
						run: (*parser).callonTERRAIN_CODE56,
						expr: &litMatcher{
							pos:        position{line: 759, col: 5, offset: 23426},
							val:        "L",
							ignoreCase: false,
							want:       "\"L\"",
						},
					},
					&actionExpr{
						pos: position{line: 760, col: 5, offset: 23461},
						run: (*parser).callonTERRAIN_CODE58,
						expr: &litMatcher{
							pos:        position{line: 760, col: 5, offset: 23461},
							val:        "O",
							ignoreCase: false,
							want:       "\"O\"",
						},
					},
				},
			},
		},
		{
			name: "UNIT_ID",
			pos:  position{line: 763, col: 1, offset: 23496},
			expr: &actionExpr{
				pos: position{line: 763, col: 12, offset: 23507},
				run: (*parser).callonUNIT_ID1,
				expr: &seqExpr{
					pos: position{line: 763, col: 12, offset: 23507},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 763, col: 12, offset: 23507},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 18, offset: 23513},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 24, offset: 23519},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 30, offset: 23525},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 763, col: 36, offset: 23531},
							expr: &seqExpr{
								pos: position{line: 763, col: 37, offset: 23532},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 763, col: 37, offset: 23532},
										val:        "[cefg]",
										chars:      []rune{'c', 'e', 'f', 'g'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 763, col: 44, offset: 23539},
										val:        "[1-9]",
										ranges:     []rune{'1', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WINDSTRENGTH",
			pos:  position{line: 767, col: 1, offset: 23585},
			expr: &choiceExpr{
				pos: position{line: 767, col: 17, offset: 23601},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 767, col: 17, offset: 23601},
						run: (*parser).callonWINDSTRENGTH2,
						expr: &litMatcher{
							pos:        position{line: 767, col: 17, offset: 23601},
							val:        "CALM",
							ignoreCase: false,
							want:       "\"CALM\"",
						},
					},
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 23641},
						run: (*parser).callonWINDSTRENGTH4,
						expr: &litMatcher{
							pos:        position{line: 769, col: 5, offset: 23641},
							val:        "MILD",
							ignoreCase: false,
							want:       "\"MILD\"",
						},
					},
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 23681},
						run: (*parser).callonWINDSTRENGTH6,
						expr: &litMatcher{
							pos:        position{line: 771, col: 5, offset: 23681},
							val:        "STRONG",
							ignoreCase: false,
							want:       "\"STRONG\"",
						},
					},
					&actionExpr{
						pos: position{line: 773, col: 5, offset: 23725},
						run: (*parser).callonWINDSTRENGTH8,
						expr: &litMatcher{
							pos:        position{line: 773, col: 5, offset: 23725},
							val:        "GALE",
							ignoreCase: false,
							want:       "\"GALE\"",
						},
					},
				},
			},
		},
		{
			name: "YEAR",
			pos:  position{line: 777, col: 1, offset: 23764},
			expr: &actionExpr{
				pos: position{line: 777, col: 9, offset: 23772},
				run: (*parser).callonYEAR1,
				expr: &seqExpr{
					pos: position{line: 777, col: 9, offset: 23772},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 777, col: 9, offset: 23772},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 15, offset: 23778},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 21, offset: 23784},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 777, col: 27, offset: 23790},
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 27, offset: 23790},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 783, col: 1, offset: 23867},
			expr: &notExpr{
				pos: position{line: 783, col: 10, offset: 23876},
				expr: &anyMatcher{
					line: 783, col: 11, offset: 23877,
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 784, col: 1, offset: 23879},
			expr: &charClassMatcher{
				pos:        position{line: 784, col: 10, offset: 23888},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "LETTER",
			pos:  position{line: 785, col: 1, offset: 23894},
			expr: &charClassMatcher{
				pos:        position{line: 785, col: 10, offset: 23903},
				val:        "[A-Z]",
				ranges:     []rune{'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "SP",
			pos:  position{line: 786, col: 1, offset: 23909},
			expr: &oneOrMoreExpr{
				pos: position{line: 786, col: 10, offset: 23918},
				expr: &charClassMatcher{
					pos:        position{line: 786, col: 10, offset: 23918},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 787, col: 1, offset: 23925},
			expr: &zeroOrMoreExpr{
				pos: position{line: 787, col: 10, offset: 23934},
				expr: &charClassMatcher{
					pos:        position{line: 787, col: 10, offset: 23934},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
	},
}

func (c *current) onNoop1() (any, error) {
	return true, nil
}

func (p *parser) callonNoop1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoop1()
}

func (c *current) onAdminNote1() (any, error) {
	return true, nil
}

func (p *parser) callonAdminNote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdminNote1()
}

func (c *current) onMiscNote1() (any, error) {
	//log.Printf("peg: misc note %q\n", string(c.text))
	return true, nil
}

func (p *parser) callonMiscNote1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMiscNote1()
}

func (c *current) onCrowsNestObservation1(cs, cp any) (any, error) {
	return FarHorizon_t{
		Point:   cp.(compass.Point_e),
		Terrain: cs.(terrain.Terrain_e),
	}, nil
}

func (p *parser) callonCrowsNestObservation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrowsNestObservation1(stack["cs"], stack["cp"])
}

func (c *current) onDeckObservation1(d, t any) (any, error) {
	return NearHorizon_t{
		Point:   d.(direction.Direction_e),
		Terrain: t.(terrain.Terrain_e),
	}, nil
}

func (p *parser) callonDeckObservation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeckObservation1(stack["d"], stack["t"])
}

func (c *current) onEdgeType2() (any, error) {
	return edges.Canal, nil
}

func (p *parser) callonEdgeType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEdgeType2()
}

func (c *current) onEdgeType4() (any, error) {
	return edges.Ford, nil
}

func (p *parser) callonEdgeType4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEdgeType4()
}

func (c *current) onEdgeType6() (any, error) {
	return edges.Pass, nil
}

func (p *parser) callonEdgeType6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEdgeType6()
}

func (c *current) onEdgeType8() (any, error) {
	return edges.River, nil
}

func (p *parser) callonEdgeType8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEdgeType8()
}

func (c *current) onEdgeType10() (any, error) {
	return edges.StoneRoad, nil
}

func (p *parser) callonEdgeType10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEdgeType10()
}

func (c *current) onFleetMovement1(ws, d, results any) (any, error) {
	mt := Movement_t{Type: unit_movement.Fleet}
	mt.Winds.Strength = ws.(winds.Strength_e)
	mt.Winds.From = d.(direction.Direction_e)
	if results != nil {
		mt.Text = bdup(results.([]byte))
	}
	return mt, nil
}

func (p *parser) callonFleetMovement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFleetMovement1(stack["ws"], stack["d"], stack["results"])
}

func (c *current) onLocation1(u, ch, ph any) (any, error) {
	return Location_t{
		UnitId:      u.(UnitId_t),
		CurrentHex:  ch.(string),
		PreviousHex: ph.(string),
	}, nil
}

func (p *parser) callonLocation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["u"], stack["ch"], stack["ph"])
}

func (c *current) onLonghouse1(szi, idi any) (any, error) {
	if szi == nil || idi == nil {
		return nil, fmt.Errorf("longhouse: szi and idi are nil")
	}
	var lh Longhouse_t

	for _, digitsi := range toAnySlice(szi) {
		switch digits := digitsi.(type) {
		case []uint8:
			lh.Capacity = lh.Capacity*10 + int(digits[0]-'0')
		default:
			panic(fmt.Errorf("longhouse: capacity: digits: unknown type %T", digits))
		}
	}

	var idBuf []byte
	id := idi.([]any)
	switch letters := id[0].(type) {
	case []uint8:
		idBuf = append(idBuf, letters...)
	default:
		panic(fmt.Errorf("longhouse: id: letters: unknown type %T", letters))
	}
	for _, digitsi := range toAnySlice(id[1]) {
		switch digits := digitsi.(type) {
		case []uint8:
			idBuf = append(idBuf, digits...)
		default:
			panic(fmt.Errorf("longhouse: id: digits: unknown type %T", digits))
		}
	}
	lh.Id = string(idBuf)

	return lh, nil
}

func (p *parser) callonLonghouse1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLonghouse1(stack["szi"], stack["idi"])
}

func (c *current) onObviousNeighboringTerrainCode2() (any, error) {
	return terrain.Alps, nil
}

func (p *parser) callonObviousNeighboringTerrainCode2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObviousNeighboringTerrainCode2()
}

func (c *current) onObviousNeighboringTerrainCode4() (any, error) {
	return terrain.HighSnowyMountains, nil
}

func (p *parser) callonObviousNeighboringTerrainCode4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObviousNeighboringTerrainCode4()
}

func (c *current) onObviousNeighboringTerrainCode6() (any, error) {
	return terrain.LowConiferMountains, nil
}

func (p *parser) callonObviousNeighboringTerrainCode6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObviousNeighboringTerrainCode6()
}

func (c *current) onObviousNeighboringTerrainCode8() (any, error) {
	return terrain.LowJungleMountains, nil
}

func (p *parser) callonObviousNeighboringTerrainCode8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObviousNeighboringTerrainCode8()
}

func (c *current) onObviousNeighboringTerrainCode10() (any, error) {
	return terrain.LowSnowyMountains, nil
}

func (p *parser) callonObviousNeighboringTerrainCode10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObviousNeighboringTerrainCode10()
}

func (c *current) onObviousNeighboringTerrainCode12() (any, error) {
	return terrain.LowVolcanicMountains, nil
}

func (p *parser) callonObviousNeighboringTerrainCode12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObviousNeighboringTerrainCode12()
}

func (c *current) onObviousNeighboringTerrainCode14() (any, error) {
	return terrain.Lake, nil
}

func (p *parser) callonObviousNeighboringTerrainCode14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObviousNeighboringTerrainCode14()
}

func (c *current) onObviousNeighboringTerrainCode16() (any, error) {
	return terrain.Ocean, nil
}

func (p *parser) callonObviousNeighboringTerrainCode16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObviousNeighboringTerrainCode16()
}

func (c *current) onProhibitedBy2() (any, error) {
	return terrain.Lake, nil
}

func (p *parser) callonProhibitedBy2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProhibitedBy2()
}

func (c *current) onProhibitedBy4() (any, error) {
	return terrain.Ocean, nil
}

func (p *parser) callonProhibitedBy4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProhibitedBy4()
}

func (c *current) onScoutMovement1(no, results any) (any, error) {
	mt := Movement_t{Type: unit_movement.Scouts}
	switch v := no.(type) {
	case []uint8:
		if len(v) != 1 {
			return nil, fmt.Errorf("invalid scout number")
		}
		mt.ScoutNo = int(v[0] - '0')
	default:
		panic(fmt.Errorf("scoutMovement: unknown type %T", v))
	}
	if results != nil {
		mt.Text = bdup(results.([]byte))
	}
	return mt, nil
}

func (p *parser) callonScoutMovement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScoutMovement1(stack["no"], stack["results"])
}

func (c *current) onSpaceDirection1(d any) (any, error) {
	return d, nil
}

func (p *parser) callonSpaceDirection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceDirection1(stack["d"])
}

func (c *current) onSpaceUnitID1(u any) (any, error) {
	return u, nil
}

func (p *parser) callonSpaceUnitID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpaceUnitID1(stack["u"])
}

func (c *current) onStatusLine1(u, results any) (any, error) {
	mt := Movement_t{
		Type:   unit_movement.Status,
		UnitId: u.(UnitId_t),
	}
	if results != nil {
		mt.Text = bdup(results.([]byte))
	}
	return mt, nil
}

func (p *parser) callonStatusLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatusLine1(stack["u"], stack["results"])
}

func (c *current) onStep2(d, t any) (any, error) {
	return DirectionTerrain_t{
		Direction: d.(direction.Direction_e),
		Terrain:   t.(terrain.Terrain_e),
	}, nil
}

func (p *parser) callonStep2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep2(stack["d"], stack["t"])
}

func (c *current) onStep10(t, d any) (any, error) {
	return &ProhibitedFrom_t{
		Direction: d.(direction.Direction_e),
		Terrain:   t.(terrain.Terrain_e),
	}, nil
}

func (p *parser) callonStep10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep10(stack["t"], stack["d"])
}

func (c *current) onStep25(d any) (any, error) {
	return &ProhibitedFrom_t{
		Direction: d.(direction.Direction_e),
		Terrain:   terrain.JungleHills,
	}, nil
}

func (p *parser) callonStep25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep25(stack["d"])
}

func (c *current) onStep36(d any) (any, error) {
	return &ProhibitedFrom_t{
		Direction: d.(direction.Direction_e),
		Terrain:   terrain.UnknownMountain,
	}, nil
}

func (p *parser) callonStep36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep36(stack["d"])
}

func (c *current) onStep47(d any) (any, error) {
	return &ProhibitedFrom_t{
		Direction: d.(direction.Direction_e),
		Terrain:   terrain.UnknownJungleSwamp,
	}, nil
}

func (p *parser) callonStep47() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep47(stack["d"])
}

func (c *current) onStep56(d any) (any, error) {
	return &ProhibitedFrom_t{
		Direction: d.(direction.Direction_e),
		Terrain:   terrain.Swamp,
	}, nil
}

func (p *parser) callonStep56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep56(stack["d"])
}

func (c *current) onStep67() (any, error) {
	return DidNotReturn_t{}, nil
}

func (p *parser) callonStep67() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep67()
}

func (c *current) onStep71() (any, error) {
	return InsufficientCapacity_t{}, nil
}

func (p *parser) callonStep71() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep71()
}

func (c *current) onStep75(r any) (any, error) {
	return r, nil
}

func (p *parser) callonStep75() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep75(stack["r"])
}

func (c *current) onStep82(n, i any) (any, error) {
	return FoundItem_t{
		Quantity: n.(int),
		Item:     i.(items.Item_e),
	}, nil
}

func (p *parser) callonStep82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep82(stack["n"], stack["i"])
}

func (c *current) onStep92(d any) (any, error) {
	return &ProhibitedFrom_t{
		Direction: d.(direction.Direction_e),
		Terrain:   terrain.UnknownJungleSwamp,
	}, nil
}

func (p *parser) callonStep92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep92(stack["d"])
}

func (c *current) onStep101() (any, error) {
	return InsufficientCapacity_t{}, nil
}

func (p *parser) callonStep101() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep101()
}

func (c *current) onStep105() (any, error) {
	return NoDirection_t{}, nil
}

func (p *parser) callonStep105() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep105()
}

func (c *current) onStep109(d any) (any, error) {
	return &BlockedByEdge_t{
		Direction: d.(direction.Direction_e),
		Edge:      edges.River,
	}, nil
}

func (p *parser) callonStep109() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep109(stack["d"])
}

func (c *current) onStep119() (any, error) {
	return NoGroupsFound_t{}, nil
}

func (p *parser) callonStep119() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep119()
}

func (c *current) onStep123(d any) (any, error) {
	return &ProhibitedFrom_t{
		Direction: d.(direction.Direction_e),
		Terrain:   terrain.UnknownMountain,
	}, nil
}

func (p *parser) callonStep123() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep123(stack["d"])
}

func (c *current) onStep132(d any) (any, error) {
	return MissingEdge_t{
		Direction: d.(direction.Direction_e),
	}, nil
}

func (p *parser) callonStep132() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep132(stack["d"])
}

func (c *current) onStep140() (any, error) {
	return &Exhausted_t{
		Direction: direction.Unknown,
		Terrain:   terrain.Blank,
	}, nil
}

func (p *parser) callonStep140() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep140()
}

func (c *current) onStep146(d, t any) (any, error) {
	return &Exhausted_t{
		Direction: d.(direction.Direction_e),
		Terrain:   t.(terrain.Terrain_e),
	}, nil
}

func (p *parser) callonStep146() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep146(stack["d"], stack["t"])
}

func (c *current) onStep159() (any, error) {
	return FoundNothing_t{}, nil
}

func (p *parser) callonStep159() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep159()
}

func (c *current) onStep164(u, sui any) (any, error) {
	var patrolled Patrolled_t
	patrolled.FoundUnits = []FoundUnit_t{{Id: u.(UnitId_t)}}
	for _, su := range toAnySlice(sui) {
		switch v := su.(type) {
		case UnitId_t:
			patrolled.FoundUnits = append(patrolled.FoundUnits, FoundUnit_t{Id: v})
		default:
			panic(fmt.Errorf("unexpected type %T", v))
		}
	}
	return &patrolled, nil
}

func (p *parser) callonStep164() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep164(stack["u"], stack["sui"])
}

func (c *current) onStep174(t, d, sdi any) (any, error) {
	kind := t.(terrain.Terrain_e)
	neighbors := []*Neighbor_t{{
		Direction: d.(direction.Direction_e),
		Terrain:   kind,
	}}
	for _, sd := range toAnySlice(sdi) {
		switch v := sd.(type) {
		case direction.Direction_e:
			neighbors = append(neighbors, &Neighbor_t{Direction: v, Terrain: kind})
		default:
			panic(fmt.Errorf("unexpected type %T", v))
		}
	}
	return neighbors, nil
}

func (p *parser) callonStep174() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep174(stack["t"], stack["d"], stack["sdi"])
}

func (c *current) onStep186(et, d, edi any) (any, error) {
	kind := et.(edges.Edge_e)
	edges := []*Edge_t{&Edge_t{Direction: d.(direction.Direction_e), Edge: kind}}
	for _, ed := range toAnySlice(edi) {
		switch v := ed.(type) {
		case direction.Direction_e:
			edges = append(edges, &Edge_t{Direction: v, Edge: kind})
		default:
			panic(fmt.Errorf("unexpected type %T", v))
		}
	}
	return edges, nil
}

func (p *parser) callonStep186() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep186(stack["et"], stack["d"], stack["edi"])
}

func (c *current) onStep197(n, i any) (any, error) {
	return FoundItem_t{
		Quantity: n.(int),
		Item:     i.(items.Item_e),
	}, nil
}

func (p *parser) callonStep197() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep197(stack["n"], stack["i"])
}

func (c *current) onStep205(u, sui any) (any, error) {
	found := []FoundUnit_t{{Id: u.(UnitId_t)}}
	for _, su := range toAnySlice(sui) {
		switch v := su.(type) {
		case UnitId_t:
			found = append(found, FoundUnit_t{Id: v})
		default:
			panic(fmt.Errorf("unexpected type %T", v))
		}
	}
	return found, nil
}

func (p *parser) callonStep205() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep205(stack["u"], stack["sui"])
}

func (c *current) onStep213(lh any) (any, error) {
	return lh, nil
}

func (p *parser) callonStep213() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep213(stack["lh"])
}

func (c *current) onStep218(r any) (any, error) {
	return r, nil
}

func (p *parser) callonStep218() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep218(stack["r"])
}

func (c *current) onStep223(d any) (any, error) {
	return d, nil
}

func (p *parser) callonStep223() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep223(stack["d"])
}

func (c *current) onStep228(t any) (any, error) {
	return t, nil
}

func (p *parser) callonStep228() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStep228(stack["t"])
}

func (c *current) onTribeFollows1(u any) (any, error) {
	mt := Movement_t{Type: unit_movement.Follows, Follows: u.(UnitId_t)}
	return mt, nil
}

func (p *parser) callonTribeFollows1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeFollows1(stack["u"])
}

func (c *current) onTribeGoesTo1(h any) (any, error) {
	mt := Movement_t{Type: unit_movement.GoesTo, GoesTo: h.(string)}
	return mt, nil
}

func (p *parser) callonTribeGoesTo1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeGoesTo1(stack["h"])
}

func (c *current) onTribeMovement1(results any) (any, error) {
	mt := Movement_t{Type: unit_movement.Tribe}
	if results != nil {
		mt.Text = bdup(results.([]byte))
	}
	return mt, nil
}

func (p *parser) callonTribeMovement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeMovement1(stack["results"])
}

func (c *current) onTurnInfo1(cd, nt any) (any, error) {
	if nt != nil {
		return TurnInfo_t{
			CurrentTurn: cd.(Date_t),
			NextTurn:    nt.(Date_t),
		}, nil
	}

	return TurnInfo_t{
		CurrentTurn: cd.(Date_t),
	}, nil
}

func (p *parser) callonTurnInfo1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTurnInfo1(stack["cd"], stack["nt"])
}

func (c *current) onCurrentTurn1(cd any) (any, error) {
	return cd, nil
}

func (p *parser) callonCurrentTurn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCurrentTurn1(stack["cd"])
}

func (c *current) onNextTurn1(nd any) (any, error) {
	return nd, nil
}

func (p *parser) callonNextTurn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNextTurn1(stack["nd"])
}

func (c *current) onReportDate1() (any, error) {
	//log.Printf("reportDate %q\n", c.text)
	return c.text, nil
}

func (p *parser) callonReportDate1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReportDate1()
}

func (c *current) onToEOL1() (any, error) {
	return c.text, nil
}

func (p *parser) callonToEOL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onToEOL1()
}

func (c *current) onTurnSeason1() (any, error) {
	//log.Printf("turnSeason %q\n", c.text)
	return c.text, nil
}

func (p *parser) callonTurnSeason1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTurnSeason1()
}

func (c *current) onTurnWeather1() (any, error) {
	//log.Printf("turnWeather %q\n", c.text)
	return c.text, nil
}

func (p *parser) callonTurnWeather1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTurnWeather1()
}

func (c *current) onYearMonth1(y, m any) (any, error) {
	return Date_t{
		Year:  y.(int),
		Month: m.(int),
	}, nil
}

func (p *parser) callonYearMonth1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYearMonth1(stack["y"], stack["m"])
}

func (c *current) onCOMPASSPOINT2() (any, error) {
	return compass.NorthEast, nil
}

func (p *parser) callonCOMPASSPOINT2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT2()
}

func (c *current) onCOMPASSPOINT4() (any, error) {
	return compass.East, nil
}

func (p *parser) callonCOMPASSPOINT4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT4()
}

func (c *current) onCOMPASSPOINT6() (any, error) {
	return compass.NorthWest, nil
}

func (p *parser) callonCOMPASSPOINT6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT6()
}

func (c *current) onCOMPASSPOINT8() (any, error) {
	return compass.NorthNorthEast, nil
}

func (p *parser) callonCOMPASSPOINT8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT8()
}

func (c *current) onCOMPASSPOINT10() (any, error) {
	return compass.NorthNorthWest, nil
}

func (p *parser) callonCOMPASSPOINT10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT10()
}

func (c *current) onCOMPASSPOINT12() (any, error) {
	return compass.North, nil
}

func (p *parser) callonCOMPASSPOINT12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT12()
}

func (c *current) onCOMPASSPOINT14() (any, error) {
	return compass.SouthEast, nil
}

func (p *parser) callonCOMPASSPOINT14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT14()
}

func (c *current) onCOMPASSPOINT16() (any, error) {
	return compass.West, nil
}

func (p *parser) callonCOMPASSPOINT16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT16()
}

func (c *current) onCOMPASSPOINT18() (any, error) {
	return compass.SouthWest, nil
}

func (p *parser) callonCOMPASSPOINT18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT18()
}

func (c *current) onCOMPASSPOINT20() (any, error) {
	return compass.SouthSouthEast, nil
}

func (p *parser) callonCOMPASSPOINT20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT20()
}

func (c *current) onCOMPASSPOINT22() (any, error) {
	return compass.SouthSouthWest, nil
}

func (p *parser) callonCOMPASSPOINT22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT22()
}

func (c *current) onCOMPASSPOINT24() (any, error) {
	return compass.South, nil
}

func (p *parser) callonCOMPASSPOINT24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMPASSPOINT24()
}

func (c *current) onCOORDS2() (any, error) {
	return "N/A", nil
}

func (p *parser) callonCOORDS2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOORDS2()
}

func (c *current) onCOORDS4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOORDS4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOORDS4()
}

func (c *current) onCOORDS12() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOORDS12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOORDS12()
}

func (c *current) onCROWSIGHTING2() (any, error) {
	return terrain.UnknownLand, nil
}

func (p *parser) callonCROWSIGHTING2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCROWSIGHTING2()
}

func (c *current) onCROWSIGHTING4() (any, error) {
	return terrain.UnknownWater, nil
}

func (p *parser) callonCROWSIGHTING4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCROWSIGHTING4()
}

func (c *current) onDIRECTION2() (any, error) {
	return direction.NorthEast, nil
}

func (p *parser) callonDIRECTION2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIRECTION2()
}

func (c *current) onDIRECTION4() (any, error) {
	return direction.SouthEast, nil
}

func (p *parser) callonDIRECTION4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIRECTION4()
}

func (c *current) onDIRECTION6() (any, error) {
	return direction.SouthWest, nil
}

func (p *parser) callonDIRECTION6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIRECTION6()
}

func (c *current) onDIRECTION8() (any, error) {
	return direction.NorthWest, nil
}

func (p *parser) callonDIRECTION8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIRECTION8()
}

func (c *current) onDIRECTION10() (any, error) {
	return direction.North, nil
}

func (p *parser) callonDIRECTION10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIRECTION10()
}

func (c *current) onDIRECTION12() (any, error) {
	return direction.South, nil
}

func (p *parser) callonDIRECTION12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIRECTION12()
}

func (c *current) onITEM2() (any, error) {
	return items.Adze, nil
}

func (p *parser) callonITEM2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM2()
}

func (c *current) onITEM4() (any, error) {
	return items.Arbalest, nil
}

func (p *parser) callonITEM4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM4()
}

func (c *current) onITEM6() (any, error) {
	return items.Arrows, nil
}

func (p *parser) callonITEM6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM6()
}

func (c *current) onITEM8() (any, error) {
	return items.Axes, nil
}

func (p *parser) callonITEM8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM8()
}

func (c *current) onITEM10() (any, error) {
	return items.Backpack, nil
}

func (p *parser) callonITEM10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM10()
}

func (c *current) onITEM12() (any, error) {
	return items.Ballistae, nil
}

func (p *parser) callonITEM12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM12()
}

func (c *current) onITEM14() (any, error) {
	return items.Bark, nil
}

func (p *parser) callonITEM14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM14()
}

func (c *current) onITEM16() (any, error) {
	return items.Barrel, nil
}

func (p *parser) callonITEM16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM16()
}

func (c *current) onITEM18() (any, error) {
	return items.Bladder, nil
}

func (p *parser) callonITEM18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM18()
}

func (c *current) onITEM20() (any, error) {
	return items.Blubber, nil
}

func (p *parser) callonITEM20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM20()
}

func (c *current) onITEM22() (any, error) {
	return items.Boat, nil
}

func (p *parser) callonITEM22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM22()
}

func (c *current) onITEM24() (any, error) {
	return items.BoneArmour, nil
}

func (p *parser) callonITEM24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM24()
}

func (c *current) onITEM26() (any, error) {
	return items.Bones, nil
}

func (p *parser) callonITEM26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM26()
}

func (c *current) onITEM28() (any, error) {
	return items.Bows, nil
}

func (p *parser) callonITEM28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM28()
}

func (c *current) onITEM30() (any, error) {
	return items.Bread, nil
}

func (p *parser) callonITEM30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM30()
}

func (c *current) onITEM32() (any, error) {
	return items.Breastplate, nil
}

func (p *parser) callonITEM32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM32()
}

func (c *current) onITEM34() (any, error) {
	return items.Candle, nil
}

func (p *parser) callonITEM34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM34()
}

func (c *current) onITEM36() (any, error) {
	return items.Canoes, nil
}

func (p *parser) callonITEM36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM36()
}

func (c *current) onITEM38() (any, error) {
	return items.Carpets, nil
}

func (p *parser) callonITEM38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM38()
}

func (c *current) onITEM40() (any, error) {
	return items.Catapult, nil
}

func (p *parser) callonITEM40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM40()
}

func (c *current) onITEM42() (any, error) {
	return items.Cattle, nil
}

func (p *parser) callonITEM42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM42()
}

func (c *current) onITEM44() (any, error) {
	return items.Cauldrons, nil
}

func (p *parser) callonITEM44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM44()
}

func (c *current) onITEM46() (any, error) {
	return items.Chain, nil
}

func (p *parser) callonITEM46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM46()
}

func (c *current) onITEM48() (any, error) {
	return items.China, nil
}

func (p *parser) callonITEM48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM48()
}

func (c *current) onITEM50() (any, error) {
	return items.Clay, nil
}

func (p *parser) callonITEM50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM50()
}

func (c *current) onITEM52() (any, error) {
	return items.Cloth, nil
}

func (p *parser) callonITEM52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM52()
}

func (c *current) onITEM54() (any, error) {
	return items.Clubs, nil
}

func (p *parser) callonITEM54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM54()
}

func (c *current) onITEM56() (any, error) {
	return items.Coal, nil
}

func (p *parser) callonITEM56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM56()
}

func (c *current) onITEM58() (any, error) {
	return items.Coffee, nil
}

func (p *parser) callonITEM58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM58()
}

func (c *current) onITEM60() (any, error) {
	return items.Coins, nil
}

func (p *parser) callonITEM60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM60()
}

func (c *current) onITEM62() (any, error) {
	return items.Cotton, nil
}

func (p *parser) callonITEM62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM62()
}

func (c *current) onITEM64() (any, error) {
	return items.Cuirass, nil
}

func (p *parser) callonITEM64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM64()
}

func (c *current) onITEM66() (any, error) {
	return items.Cuirboilli, nil
}

func (p *parser) callonITEM66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM66()
}

func (c *current) onITEM68() (any, error) {
	return items.Diamond, nil
}

func (p *parser) callonITEM68() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM68()
}

func (c *current) onITEM70() (any, error) {
	return items.Diamonds, nil
}

func (p *parser) callonITEM70() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM70()
}

func (c *current) onITEM72() (any, error) {
	return items.Drum, nil
}

func (p *parser) callonITEM72() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM72()
}

func (c *current) onITEM74() (any, error) {
	return items.Elephant, nil
}

func (p *parser) callonITEM74() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM74()
}

func (c *current) onITEM76() (any, error) {
	return items.Falchion, nil
}

func (p *parser) callonITEM76() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM76()
}

func (c *current) onITEM78() (any, error) {
	return items.Fish, nil
}

func (p *parser) callonITEM78() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM78()
}

func (c *current) onITEM80() (any, error) {
	return items.Flax, nil
}

func (p *parser) callonITEM80() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM80()
}

func (c *current) onITEM82() (any, error) {
	return items.Flour, nil
}

func (p *parser) callonITEM82() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM82()
}

func (c *current) onITEM84() (any, error) {
	return items.Flute, nil
}

func (p *parser) callonITEM84() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM84()
}

func (c *current) onITEM86() (any, error) {
	return items.Fodder, nil
}

func (p *parser) callonITEM86() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM86()
}

func (c *current) onITEM88() (any, error) {
	return items.Frame, nil
}

func (p *parser) callonITEM88() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM88()
}

func (c *current) onITEM90() (any, error) {
	return items.Frankincense, nil
}

func (p *parser) callonITEM90() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM90()
}

func (c *current) onITEM92() (any, error) {
	return items.Fur, nil
}

func (p *parser) callonITEM92() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM92()
}

func (c *current) onITEM94() (any, error) {
	return items.Glasspipe, nil
}

func (p *parser) callonITEM94() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM94()
}

func (c *current) onITEM96() (any, error) {
	return items.Goats, nil
}

func (p *parser) callonITEM96() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM96()
}

func (c *current) onITEM98() (any, error) {
	return items.Gold, nil
}

func (p *parser) callonITEM98() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM98()
}

func (c *current) onITEM100() (any, error) {
	return items.Grain, nil
}

func (p *parser) callonITEM100() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM100()
}

func (c *current) onITEM102() (any, error) {
	return items.Grape, nil
}

func (p *parser) callonITEM102() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM102()
}

func (c *current) onITEM104() (any, error) {
	return items.Gut, nil
}

func (p *parser) callonITEM104() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM104()
}

func (c *current) onITEM106() (any, error) {
	return items.HBow, nil
}

func (p *parser) callonITEM106() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM106()
}

func (c *current) onITEM108() (any, error) {
	return items.Harp, nil
}

func (p *parser) callonITEM108() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM108()
}

func (c *current) onITEM110() (any, error) {
	return items.Haube, nil
}

func (p *parser) callonITEM110() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM110()
}

func (c *current) onITEM112() (any, error) {
	return items.Heaters, nil
}

func (p *parser) callonITEM112() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM112()
}

func (c *current) onITEM114() (any, error) {
	return items.Helm, nil
}

func (p *parser) callonITEM114() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM114()
}

func (c *current) onITEM116() (any, error) {
	return items.Herbs, nil
}

func (p *parser) callonITEM116() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM116()
}

func (c *current) onITEM118() (any, error) {
	return items.Hive, nil
}

func (p *parser) callonITEM118() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM118()
}

func (c *current) onITEM120() (any, error) {
	return items.Hoe, nil
}

func (p *parser) callonITEM120() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM120()
}

func (c *current) onITEM122() (any, error) {
	return items.Honey, nil
}

func (p *parser) callonITEM122() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM122()
}

func (c *current) onITEM124() (any, error) {
	return items.Hood, nil
}

func (p *parser) callonITEM124() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM124()
}

func (c *current) onITEM126() (any, error) {
	return items.Horn, nil
}

func (p *parser) callonITEM126() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM126()
}

func (c *current) onITEM128() (any, error) {
	return items.Horses, nil
}

func (p *parser) callonITEM128() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM128()
}

func (c *current) onITEM130() (any, error) {
	return items.Jade, nil
}

func (p *parser) callonITEM130() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM130()
}

func (c *current) onITEM132() (any, error) {
	return items.Jerkin, nil
}

func (p *parser) callonITEM132() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM132()
}

func (c *current) onITEM134() (any, error) {
	return items.Kayak, nil
}

func (p *parser) callonITEM134() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM134()
}

func (c *current) onITEM136() (any, error) {
	return items.Ladder, nil
}

func (p *parser) callonITEM136() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM136()
}

func (c *current) onITEM138() (any, error) {
	return items.Leather, nil
}

func (p *parser) callonITEM138() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM138()
}

func (c *current) onITEM140() (any, error) {
	return items.Logs, nil
}

func (p *parser) callonITEM140() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM140()
}

func (c *current) onITEM142() (any, error) {
	return items.Lute, nil
}

func (p *parser) callonITEM142() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM142()
}

func (c *current) onITEM144() (any, error) {
	return items.Mace, nil
}

func (p *parser) callonITEM144() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM144()
}

func (c *current) onITEM146() (any, error) {
	return items.Mattock, nil
}

func (p *parser) callonITEM146() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM146()
}

func (c *current) onITEM148() (any, error) {
	return items.Metal, nil
}

func (p *parser) callonITEM148() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM148()
}

func (c *current) onITEM150() (any, error) {
	return items.MillStone, nil
}

func (p *parser) callonITEM150() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM150()
}

func (c *current) onITEM152() (any, error) {
	return items.Musk, nil
}

func (p *parser) callonITEM152() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM152()
}

func (c *current) onITEM154() (any, error) {
	return items.Net, nil
}

func (p *parser) callonITEM154() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM154()
}

func (c *current) onITEM156() (any, error) {
	return items.Oar, nil
}

func (p *parser) callonITEM156() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM156()
}

func (c *current) onITEM158() (any, error) {
	return items.Oil, nil
}

func (p *parser) callonITEM158() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM158()
}

func (c *current) onITEM160() (any, error) {
	return items.Olives, nil
}

func (p *parser) callonITEM160() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM160()
}

func (c *current) onITEM162() (any, error) {
	return items.Opium, nil
}

func (p *parser) callonITEM162() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM162()
}

func (c *current) onITEM164() (any, error) {
	return items.Ores, nil
}

func (p *parser) callonITEM164() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM164()
}

func (c *current) onITEM166() (any, error) {
	return items.Paddle, nil
}

func (p *parser) callonITEM166() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM166()
}

func (c *current) onITEM168() (any, error) {
	return items.Palanquin, nil
}

func (p *parser) callonITEM168() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM168()
}

func (c *current) onITEM170() (any, error) {
	return items.Parchment, nil
}

func (p *parser) callonITEM170() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM170()
}

func (c *current) onITEM172() (any, error) {
	return items.Pavis, nil
}

func (p *parser) callonITEM172() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM172()
}

func (c *current) onITEM174() (any, error) {
	return items.Pearls, nil
}

func (p *parser) callonITEM174() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM174()
}

func (c *current) onITEM176() (any, error) {
	return items.Pellets, nil
}

func (p *parser) callonITEM176() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM176()
}

func (c *current) onITEM178() (any, error) {
	return items.People, nil
}

func (p *parser) callonITEM178() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM178()
}

func (c *current) onITEM180() (any, error) {
	return items.Pewter, nil
}

func (p *parser) callonITEM180() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM180()
}

func (c *current) onITEM182() (any, error) {
	return items.Picks, nil
}

func (p *parser) callonITEM182() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM182()
}

func (c *current) onITEM184() (any, error) {
	return items.Plows, nil
}

func (p *parser) callonITEM184() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM184()
}

func (c *current) onITEM186() (any, error) {
	return items.Provisions, nil
}

func (p *parser) callonITEM186() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM186()
}

func (c *current) onITEM188() (any, error) {
	return items.Quarrel, nil
}

func (p *parser) callonITEM188() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM188()
}

func (c *current) onITEM190() (any, error) {
	return items.Rake, nil
}

func (p *parser) callonITEM190() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM190()
}

func (c *current) onITEM192() (any, error) {
	return items.Ram, nil
}

func (p *parser) callonITEM192() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM192()
}

func (c *current) onITEM194() (any, error) {
	return items.Ramp, nil
}

func (p *parser) callonITEM194() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM194()
}

func (c *current) onITEM196() (any, error) {
	return items.Ring, nil
}

func (p *parser) callonITEM196() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM196()
}

func (c *current) onITEM198() (any, error) {
	return items.Rope, nil
}

func (p *parser) callonITEM198() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM198()
}

func (c *current) onITEM200() (any, error) {
	return items.Rug, nil
}

func (p *parser) callonITEM200() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM200()
}

func (c *current) onITEM202() (any, error) {
	return items.Saddle, nil
}

func (p *parser) callonITEM202() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM202()
}

func (c *current) onITEM204() (any, error) {
	return items.Saddlebag, nil
}

func (p *parser) callonITEM204() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM204()
}

func (c *current) onITEM206() (any, error) {
	return items.Salt, nil
}

func (p *parser) callonITEM206() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM206()
}

func (c *current) onITEM208() (any, error) {
	return items.Sand, nil
}

func (p *parser) callonITEM208() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM208()
}

func (c *current) onITEM210() (any, error) {
	return items.Scale, nil
}

func (p *parser) callonITEM210() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM210()
}

func (c *current) onITEM212() (any, error) {
	return items.Sculpture, nil
}

func (p *parser) callonITEM212() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM212()
}

func (c *current) onITEM214() (any, error) {
	return items.Scutum, nil
}

func (p *parser) callonITEM214() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM214()
}

func (c *current) onITEM216() (any, error) {
	return items.Scythe, nil
}

func (p *parser) callonITEM216() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM216()
}

func (c *current) onITEM218() (any, error) {
	return items.Shackle, nil
}

func (p *parser) callonITEM218() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM218()
}

func (c *current) onITEM220() (any, error) {
	return items.Shaft, nil
}

func (p *parser) callonITEM220() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM220()
}

func (c *current) onITEM222() (any, error) {
	return items.Shield, nil
}

func (p *parser) callonITEM222() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM222()
}

func (c *current) onITEM224() (any, error) {
	return items.Shovel, nil
}

func (p *parser) callonITEM224() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM224()
}

func (c *current) onITEM226() (any, error) {
	return items.Silk, nil
}

func (p *parser) callonITEM226() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM226()
}

func (c *current) onITEM228() (any, error) {
	return items.Silver, nil
}

func (p *parser) callonITEM228() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM228()
}

func (c *current) onITEM230() (any, error) {
	return items.Skin, nil
}

func (p *parser) callonITEM230() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM230()
}

func (c *current) onITEM232() (any, error) {
	return items.Slaves, nil
}

func (p *parser) callonITEM232() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM232()
}

func (c *current) onITEM234() (any, error) {
	return items.Slings, nil
}

func (p *parser) callonITEM234() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM234()
}

func (c *current) onITEM236() (any, error) {
	return items.Snare, nil
}

func (p *parser) callonITEM236() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM236()
}

func (c *current) onITEM238() (any, error) {
	return items.Spear, nil
}

func (p *parser) callonITEM238() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM238()
}

func (c *current) onITEM240() (any, error) {
	return items.Spetum, nil
}

func (p *parser) callonITEM240() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM240()
}

func (c *current) onITEM242() (any, error) {
	return items.Spice, nil
}

func (p *parser) callonITEM242() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM242()
}

func (c *current) onITEM244() (any, error) {
	return items.Statue, nil
}

func (p *parser) callonITEM244() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM244()
}

func (c *current) onITEM246() (any, error) {
	return items.Stave, nil
}

func (p *parser) callonITEM246() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM246()
}

func (c *current) onITEM248() (any, error) {
	return items.Stones, nil
}

func (p *parser) callonITEM248() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM248()
}

func (c *current) onITEM250() (any, error) {
	return items.String, nil
}

func (p *parser) callonITEM250() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM250()
}

func (c *current) onITEM252() (any, error) {
	return items.Sugar, nil
}

func (p *parser) callonITEM252() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM252()
}

func (c *current) onITEM254() (any, error) {
	return items.Sword, nil
}

func (p *parser) callonITEM254() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM254()
}

func (c *current) onITEM256() (any, error) {
	return items.Tapestries, nil
}

func (p *parser) callonITEM256() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM256()
}

func (c *current) onITEM258() (any, error) {
	return items.Tea, nil
}

func (p *parser) callonITEM258() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM258()
}

func (c *current) onITEM260() (any, error) {
	return items.Tobacco, nil
}

func (p *parser) callonITEM260() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM260()
}

func (c *current) onITEM262() (any, error) {
	return items.Trap, nil
}

func (p *parser) callonITEM262() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM262()
}

func (c *current) onITEM264() (any, error) {
	return items.Trews, nil
}

func (p *parser) callonITEM264() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM264()
}

func (c *current) onITEM266() (any, error) {
	return items.Trinket, nil
}

func (p *parser) callonITEM266() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM266()
}

func (c *current) onITEM268() (any, error) {
	return items.Trumpet, nil
}

func (p *parser) callonITEM268() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM268()
}

func (c *current) onITEM270() (any, error) {
	return items.Urn, nil
}

func (p *parser) callonITEM270() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM270()
}

func (c *current) onITEM272() (any, error) {
	return items.Wagons, nil
}

func (p *parser) callonITEM272() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM272()
}

func (c *current) onITEM274() (any, error) {
	return items.Wax, nil
}

func (p *parser) callonITEM274() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onITEM274()
}

func (c *current) onMONTH1() (any, error) {
	n, _ := strconv.Atoi(string(c.text))
	return int(n), nil
}

func (p *parser) callonMONTH1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMONTH1()
}

func (c *current) onNUMBER1() (any, error) {
	n, _ := strconv.Atoi(string(c.text))
	return int(n), nil
}

func (p *parser) callonNUMBER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onRESOURCE2() (any, error) {
	return resources.Coal, nil
}

func (p *parser) callonRESOURCE2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE2()
}

func (c *current) onRESOURCE4() (any, error) {
	return resources.CopperOre, nil
}

func (p *parser) callonRESOURCE4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE4()
}

func (c *current) onRESOURCE6() (any, error) {
	return resources.Diamond, nil
}

func (p *parser) callonRESOURCE6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE6()
}

func (c *current) onRESOURCE8() (any, error) {
	return resources.Frankincense, nil
}

func (p *parser) callonRESOURCE8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE8()
}

func (c *current) onRESOURCE10() (any, error) {
	return resources.Gold, nil
}

func (p *parser) callonRESOURCE10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE10()
}

func (c *current) onRESOURCE12() (any, error) {
	return resources.IronOre, nil
}

func (p *parser) callonRESOURCE12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE12()
}

func (c *current) onRESOURCE14() (any, error) {
	return resources.Jade, nil
}

func (p *parser) callonRESOURCE14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE14()
}

func (c *current) onRESOURCE16() (any, error) {
	return resources.Kaolin, nil
}

func (p *parser) callonRESOURCE16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE16()
}

func (c *current) onRESOURCE18() (any, error) {
	return resources.LeadOre, nil
}

func (p *parser) callonRESOURCE18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE18()
}

func (c *current) onRESOURCE20() (any, error) {
	return resources.Limestone, nil
}

func (p *parser) callonRESOURCE20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE20()
}

func (c *current) onRESOURCE22() (any, error) {
	return resources.NickelOre, nil
}

func (p *parser) callonRESOURCE22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE22()
}

func (c *current) onRESOURCE24() (any, error) {
	return resources.Pearls, nil
}

func (p *parser) callonRESOURCE24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE24()
}

func (c *current) onRESOURCE26() (any, error) {
	return resources.Pyrite, nil
}

func (p *parser) callonRESOURCE26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE26()
}

func (c *current) onRESOURCE28() (any, error) {
	return resources.Rubies, nil
}

func (p *parser) callonRESOURCE28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE28()
}

func (c *current) onRESOURCE30() (any, error) {
	return resources.Salt, nil
}

func (p *parser) callonRESOURCE30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE30()
}

func (c *current) onRESOURCE32() (any, error) {
	return resources.Silver, nil
}

func (p *parser) callonRESOURCE32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE32()
}

func (c *current) onRESOURCE34() (any, error) {
	return resources.Sulphur, nil
}

func (p *parser) callonRESOURCE34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE34()
}

func (c *current) onRESOURCE36() (any, error) {
	return resources.TinOre, nil
}

func (p *parser) callonRESOURCE36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE36()
}

func (c *current) onRESOURCE38() (any, error) {
	return resources.VanadiumOre, nil
}

func (p *parser) callonRESOURCE38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE38()
}

func (c *current) onRESOURCE40() (any, error) {
	return resources.ZincOre, nil
}

func (p *parser) callonRESOURCE40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRESOURCE40()
}

func (c *current) onTERRAIN2() (any, error) {
	return terrain.Alps, nil
}

func (p *parser) callonTERRAIN2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN2()
}

func (c *current) onTERRAIN4() (any, error) {
	return terrain.AridHills, nil
}

func (p *parser) callonTERRAIN4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN4()
}

func (c *current) onTERRAIN6() (any, error) {
	return terrain.AridTundra, nil
}

func (p *parser) callonTERRAIN6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN6()
}

func (c *current) onTERRAIN8() (any, error) {
	return terrain.AridTundra, nil
}

func (p *parser) callonTERRAIN8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN8()
}

func (c *current) onTERRAIN10() (any, error) {
	return terrain.BrushFlat, nil
}

func (p *parser) callonTERRAIN10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN10()
}

func (c *current) onTERRAIN12() (any, error) {
	return terrain.BrushHills, nil
}

func (p *parser) callonTERRAIN12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN12()
}

func (c *current) onTERRAIN14() (any, error) {
	return terrain.BrushFlat, nil
}

func (p *parser) callonTERRAIN14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN14()
}

func (c *current) onTERRAIN16() (any, error) {
	return terrain.ConiferHills, nil
}

func (p *parser) callonTERRAIN16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN16()
}

func (c *current) onTERRAIN18() (any, error) {
	return terrain.Deciduous, nil
}

func (p *parser) callonTERRAIN18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN18()
}

func (c *current) onTERRAIN20() (any, error) {
	return terrain.DeciduousHills, nil
}

func (p *parser) callonTERRAIN20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN20()
}

func (c *current) onTERRAIN22() (any, error) {
	return terrain.Deciduous, nil
}

func (p *parser) callonTERRAIN22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN22()
}

func (c *current) onTERRAIN24() (any, error) {
	return terrain.Desert, nil
}

func (p *parser) callonTERRAIN24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN24()
}

func (c *current) onTERRAIN26() (any, error) {
	return terrain.GrassyHillsPlateau, nil
}

func (p *parser) callonTERRAIN26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN26()
}

func (c *current) onTERRAIN28() (any, error) {
	return terrain.GrassyHills, nil
}

func (p *parser) callonTERRAIN28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN28()
}

func (c *current) onTERRAIN30() (any, error) {
	return terrain.HighSnowyMountains, nil
}

func (p *parser) callonTERRAIN30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN30()
}

func (c *current) onTERRAIN32() (any, error) {
	return terrain.JungleHills, nil
}

func (p *parser) callonTERRAIN32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN32()
}

func (c *current) onTERRAIN34() (any, error) {
	return terrain.Jungle, nil
}

func (p *parser) callonTERRAIN34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN34()
}

func (c *current) onTERRAIN36() (any, error) {
	return terrain.Lake, nil
}

func (p *parser) callonTERRAIN36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN36()
}

func (c *current) onTERRAIN38() (any, error) {
	return terrain.LowAridMountains, nil
}

func (p *parser) callonTERRAIN38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN38()
}

func (c *current) onTERRAIN40() (any, error) {
	return terrain.LowConiferMountains, nil
}

func (p *parser) callonTERRAIN40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN40()
}

func (c *current) onTERRAIN42() (any, error) {
	return terrain.LowJungleMountains, nil
}

func (p *parser) callonTERRAIN42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN42()
}

func (c *current) onTERRAIN44() (any, error) {
	return terrain.LowSnowyMountains, nil
}

func (p *parser) callonTERRAIN44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN44()
}

func (c *current) onTERRAIN46() (any, error) {
	return terrain.LowVolcanicMountains, nil
}

func (p *parser) callonTERRAIN46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN46()
}

func (c *current) onTERRAIN48() (any, error) {
	return terrain.LowVolcanicMountains, nil
}

func (p *parser) callonTERRAIN48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN48()
}

func (c *current) onTERRAIN50() (any, error) {
	return terrain.Ocean, nil
}

func (p *parser) callonTERRAIN50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN50()
}

func (c *current) onTERRAIN52() (any, error) {
	return terrain.GrassyHillsPlateau, nil
}

func (p *parser) callonTERRAIN52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN52()
}

func (c *current) onTERRAIN54() (any, error) {
	return terrain.PrairiePlateau, nil
}

func (p *parser) callonTERRAIN54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN54()
}

func (c *current) onTERRAIN56() (any, error) {
	return terrain.PolarIce, nil
}

func (p *parser) callonTERRAIN56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN56()
}

func (c *current) onTERRAIN58() (any, error) {
	return terrain.Prairie, nil
}

func (p *parser) callonTERRAIN58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN58()
}

func (c *current) onTERRAIN60() (any, error) {
	return terrain.RockyHills, nil
}

func (p *parser) callonTERRAIN60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN60()
}

func (c *current) onTERRAIN62() (any, error) {
	return terrain.SnowyHills, nil
}

func (p *parser) callonTERRAIN62() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN62()
}

func (c *current) onTERRAIN64() (any, error) {
	return terrain.Swamp, nil
}

func (p *parser) callonTERRAIN64() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN64()
}

func (c *current) onTERRAIN66() (any, error) {
	return terrain.Tundra, nil
}

func (p *parser) callonTERRAIN66() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN66()
}

func (c *current) onTERRAIN_CODE2() (any, error) {
	return terrain.Alps, nil
}

func (p *parser) callonTERRAIN_CODE2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE2()
}

func (c *current) onTERRAIN_CODE4() (any, error) {
	return terrain.GrassyHillsPlateau, nil
}

func (p *parser) callonTERRAIN_CODE4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE4()
}

func (c *current) onTERRAIN_CODE6() (any, error) {
	return terrain.HighSnowyMountains, nil
}

func (p *parser) callonTERRAIN_CODE6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE6()
}

func (c *current) onTERRAIN_CODE8() (any, error) {
	return terrain.LowAridMountains, nil
}

func (p *parser) callonTERRAIN_CODE8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE8()
}

func (c *current) onTERRAIN_CODE10() (any, error) {
	return terrain.LowConiferMountains, nil
}

func (p *parser) callonTERRAIN_CODE10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE10()
}

func (c *current) onTERRAIN_CODE12() (any, error) {
	return terrain.LowJungleMountains, nil
}

func (p *parser) callonTERRAIN_CODE12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE12()
}

func (c *current) onTERRAIN_CODE14() (any, error) {
	return terrain.LowSnowyMountains, nil
}

func (p *parser) callonTERRAIN_CODE14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE14()
}

func (c *current) onTERRAIN_CODE16() (any, error) {
	return terrain.LowVolcanicMountains, nil
}

func (p *parser) callonTERRAIN_CODE16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE16()
}

func (c *current) onTERRAIN_CODE18() (any, error) {
	return terrain.GrassyHillsPlateau, nil
}

func (p *parser) callonTERRAIN_CODE18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE18()
}

func (c *current) onTERRAIN_CODE20() (any, error) {
	return terrain.PrairiePlateau, nil
}

func (p *parser) callonTERRAIN_CODE20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE20()
}

func (c *current) onTERRAIN_CODE22() (any, error) {
	return terrain.AridHills, nil
}

func (p *parser) callonTERRAIN_CODE22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE22()
}

func (c *current) onTERRAIN_CODE24() (any, error) {
	return terrain.AridTundra, nil
}

func (p *parser) callonTERRAIN_CODE24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE24()
}

func (c *current) onTERRAIN_CODE26() (any, error) {
	return terrain.BrushFlat, nil
}

func (p *parser) callonTERRAIN_CODE26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE26()
}

func (c *current) onTERRAIN_CODE28() (any, error) {
	return terrain.BrushHills, nil
}

func (p *parser) callonTERRAIN_CODE28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE28()
}

func (c *current) onTERRAIN_CODE30() (any, error) {
	return terrain.ConiferHills, nil
}

func (p *parser) callonTERRAIN_CODE30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE30()
}

func (c *current) onTERRAIN_CODE32() (any, error) {
	return terrain.Desert, nil
}

func (p *parser) callonTERRAIN_CODE32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE32()
}

func (c *current) onTERRAIN_CODE34() (any, error) {
	return terrain.DeciduousHills, nil
}

func (p *parser) callonTERRAIN_CODE34() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE34()
}

func (c *current) onTERRAIN_CODE36() (any, error) {
	return terrain.GrassyHills, nil
}

func (p *parser) callonTERRAIN_CODE36() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE36()
}

func (c *current) onTERRAIN_CODE38() (any, error) {
	return terrain.Jungle, nil
}

func (p *parser) callonTERRAIN_CODE38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE38()
}

func (c *current) onTERRAIN_CODE40() (any, error) {
	return terrain.JungleHills, nil
}

func (p *parser) callonTERRAIN_CODE40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE40()
}

func (c *current) onTERRAIN_CODE42() (any, error) {
	return terrain.PolarIce, nil
}

func (p *parser) callonTERRAIN_CODE42() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE42()
}

func (c *current) onTERRAIN_CODE44() (any, error) {
	return terrain.Prairie, nil
}

func (p *parser) callonTERRAIN_CODE44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE44()
}

func (c *current) onTERRAIN_CODE46() (any, error) {
	return terrain.RockyHills, nil
}

func (p *parser) callonTERRAIN_CODE46() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE46()
}

func (c *current) onTERRAIN_CODE48() (any, error) {
	return terrain.SnowyHills, nil
}

func (p *parser) callonTERRAIN_CODE48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE48()
}

func (c *current) onTERRAIN_CODE50() (any, error) {
	return terrain.Swamp, nil
}

func (p *parser) callonTERRAIN_CODE50() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE50()
}

func (c *current) onTERRAIN_CODE52() (any, error) {
	return terrain.Tundra, nil
}

func (p *parser) callonTERRAIN_CODE52() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE52()
}

func (c *current) onTERRAIN_CODE54() (any, error) {
	return terrain.Deciduous, nil
}

func (p *parser) callonTERRAIN_CODE54() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE54()
}

func (c *current) onTERRAIN_CODE56() (any, error) {
	return terrain.Lake, nil
}

func (p *parser) callonTERRAIN_CODE56() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE56()
}

func (c *current) onTERRAIN_CODE58() (any, error) {
	return terrain.Ocean, nil
}

func (p *parser) callonTERRAIN_CODE58() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN_CODE58()
}

func (c *current) onUNIT_ID1() (any, error) {
	return UnitId_t(c.text), nil
}

func (p *parser) callonUNIT_ID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNIT_ID1()
}

func (c *current) onWINDSTRENGTH2() (any, error) {
	return winds.Calm, nil
}

func (p *parser) callonWINDSTRENGTH2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWINDSTRENGTH2()
}

func (c *current) onWINDSTRENGTH4() (any, error) {
	return winds.Mild, nil
}

func (p *parser) callonWINDSTRENGTH4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWINDSTRENGTH4()
}

func (c *current) onWINDSTRENGTH6() (any, error) {
	return winds.Strong, nil
}

func (p *parser) callonWINDSTRENGTH6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWINDSTRENGTH6()
}

func (c *current) onWINDSTRENGTH8() (any, error) {
	return winds.Gale, nil
}

func (p *parser) callonWINDSTRENGTH8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWINDSTRENGTH8()
}

func (c *current) onYEAR1() (any, error) {
	n, _ := strconv.Atoi(string(c.text))
	return int(n), nil
}

func (p *parser) callonYEAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYEAR1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
