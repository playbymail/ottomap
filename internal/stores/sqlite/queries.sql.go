// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlite

import (
	"context"
)

const createNewReport = `-- name: CreateNewReport :one

INSERT INTO reports (clan, year, month, unit, hash, lines)
VALUES (?1, ?2, ?3, ?4, ?5, ?6)
RETURNING id
`

type CreateNewReportParams struct {
	Clan  int64
	Year  int64
	Month int64
	Unit  string
	Hash  string
	Lines string
}

//	Copyright (c) 2024 Michael D Henderson. All rights reserved.
//
// --------------------------------------------------------------------------
// CreateNewReport creates a new report.
func (q *Queries) CreateNewReport(ctx context.Context, arg CreateNewReportParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNewReport,
		arg.Clan,
		arg.Year,
		arg.Month,
		arg.Unit,
		arg.Hash,
		arg.Lines,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteReportByHash = `-- name: DeleteReportByHash :exec
DELETE
FROM reports
WHERE clan = ?1
  AND hash = ?2
`

type DeleteReportByHashParams struct {
	Clan int64
	Hash string
}

// --------------------------------------------------------------------------
// DeleteReportByHash deletes a report by its hash value.
func (q *Queries) DeleteReportByHash(ctx context.Context, arg DeleteReportByHashParams) error {
	_, err := q.db.ExecContext(ctx, deleteReportByHash, arg.Clan, arg.Hash)
	return err
}

const deleteReportByName = `-- name: DeleteReportByName :exec
DELETE
FROM reports
WHERE clan = ?1
  AND year = ?2
  AND month = ?3
  AND unit = ?4
`

type DeleteReportByNameParams struct {
	Clan  int64
	Year  int64
	Month int64
	Unit  string
}

// --------------------------------------------------------------------------
// DeleteReportByName returns a report by its name (year, month and unit).
func (q *Queries) DeleteReportByName(ctx context.Context, arg DeleteReportByNameParams) error {
	_, err := q.db.ExecContext(ctx, deleteReportByName,
		arg.Clan,
		arg.Year,
		arg.Month,
		arg.Unit,
	)
	return err
}

const getReportByHash = `-- name: GetReportByHash :one
SELECT id, clan, year, month, unit
FROM reports
WHERE clan = ?1
  AND hash = ?2
`

type GetReportByHashParams struct {
	Clan int64
	Hash string
}

type GetReportByHashRow struct {
	ID    int64
	Clan  int64
	Year  int64
	Month int64
	Unit  string
}

// --------------------------------------------------------------------------
// GetReportByHash returns a report by its hash value.
func (q *Queries) GetReportByHash(ctx context.Context, arg GetReportByHashParams) (GetReportByHashRow, error) {
	row := q.db.QueryRowContext(ctx, getReportByHash, arg.Clan, arg.Hash)
	var i GetReportByHashRow
	err := row.Scan(
		&i.ID,
		&i.Clan,
		&i.Year,
		&i.Month,
		&i.Unit,
	)
	return i, err
}

const getReportsByTurn = `-- name: GetReportsByTurn :many
SELECT id, clan, year, month, unit, hash
FROM reports
WHERE clan = ?1
  AND year = ?2
  AND month = ?3
`

type GetReportsByTurnParams struct {
	Clan  int64
	Year  int64
	Month int64
}

type GetReportsByTurnRow struct {
	ID    int64
	Clan  int64
	Year  int64
	Month int64
	Unit  string
	Hash  string
}

// --------------------------------------------------------------------------
// GetReportsByTurn returns a report by its turn number (year and month).
func (q *Queries) GetReportsByTurn(ctx context.Context, arg GetReportsByTurnParams) ([]GetReportsByTurnRow, error) {
	rows, err := q.db.QueryContext(ctx, getReportsByTurn, arg.Clan, arg.Year, arg.Month)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReportsByTurnRow
	for rows.Next() {
		var i GetReportsByTurnRow
		if err := rows.Scan(
			&i.ID,
			&i.Clan,
			&i.Year,
			&i.Month,
			&i.Unit,
			&i.Hash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
