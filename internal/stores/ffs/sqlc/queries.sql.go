// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package sqlc

import (
	"context"
	"time"
)

const authenticateUser = `-- name: AuthenticateUser :one
SELECT id, clan
FROM users
WHERE clan = ?1
  AND hashed_password = ?2
`

type AuthenticateUserParams struct {
	Clan           string
	HashedPassword string
}

type AuthenticateUserRow struct {
	ID   int64
	Clan string
}

func (q *Queries) AuthenticateUser(ctx context.Context, arg AuthenticateUserParams) (AuthenticateUserRow, error) {
	row := q.db.QueryRowContext(ctx, authenticateUser, arg.Clan, arg.HashedPassword)
	var i AuthenticateUserRow
	err := row.Scan(&i.ID, &i.Clan)
	return i, err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (id, uid, expires_dttm)
VALUES (?1, ?2, ?3)
`

type CreateSessionParams struct {
	ID          string
	Uid         int64
	ExpiresDttm time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.ID, arg.Uid, arg.ExpiresDttm)
	return err
}

const createTurnMap = `-- name: CreateTurnMap :one
INSERT INTO maps (uid, turn, clan, path)
VALUES (?1, ?2, ?3, ?4)
RETURNING id
`

type CreateTurnMapParams struct {
	Uid  int64
	Turn string
	Clan string
	Path string
}

func (q *Queries) CreateTurnMap(ctx context.Context, arg CreateTurnMapParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTurnMap,
		arg.Uid,
		arg.Turn,
		arg.Clan,
		arg.Path,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTurnReport = `-- name: CreateTurnReport :one
INSERT INTO reports (uid, turn, clan, path)
VALUES (?1, ?2, ?3, ?4)
RETURNING id
`

type CreateTurnReportParams struct {
	Uid  int64
	Turn string
	Clan string
	Path string
}

func (q *Queries) CreateTurnReport(ctx context.Context, arg CreateTurnReportParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createTurnReport,
		arg.Uid,
		arg.Turn,
		arg.Clan,
		arg.Path,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUnit = `-- name: CreateUnit :exec
INSERT INTO units (rid, turn, name, starting_hex, ending_hex)
VALUES (?1, ?2, ?3, ?4, ?5)
`

type CreateUnitParams struct {
	Rid         int64
	Turn        string
	Name        string
	StartingHex string
	EndingHex   string
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) error {
	_, err := q.db.ExecContext(ctx, createUnit,
		arg.Rid,
		arg.Turn,
		arg.Name,
		arg.StartingHex,
		arg.EndingHex,
	)
	return err
}

const createUser = `-- name: CreateUser :one


INSERT INTO users (handle, hashed_password, clan, magic_key, path)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id
`

type CreateUserParams struct {
	Handle         string
	HashedPassword string
	Clan           string
	MagicKey       string
	Path           string
}

// Copyright (c) 2024 Michael D Henderson. All rights reserved.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Handle,
		arg.HashedPassword,
		arg.Clan,
		arg.MagicKey,
		arg.Path,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE
FROM sessions
WHERE id = ?1
   OR CURRENT_TIMESTAMP >= expires_dttm
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getClan = `-- name: GetClan :one
SELECT clan
FROM users
WHERE id = ?1
`

func (q *Queries) GetClan(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getClan, id)
	var clan string
	err := row.Scan(&clan)
	return clan, err
}

const getSession = `-- name: GetSession :one
SELECT id, uid, expires_dttm
FROM sessions
WHERE id = ?1
  AND CURRENT_TIMESTAMP < expires_dttm
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.Uid, &i.ExpiresDttm)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, clan
FROM users
WHERE id = ?1
`

type GetUserRow struct {
	ID   int64
	Clan string
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Clan)
	return i, err
}

const getUserReports = `-- name: GetUserReports :many
SELECT id, turn, clan, path
FROM reports
WHERE uid = ?1
ORDER BY turn, clan
`

type GetUserReportsRow struct {
	ID   int64
	Turn string
	Clan string
	Path string
}

func (q *Queries) GetUserReports(ctx context.Context, uid int64) ([]GetUserReportsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserReports, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserReportsRow
	for rows.Next() {
		var i GetUserReportsRow
		if err := rows.Scan(
			&i.ID,
			&i.Turn,
			&i.Clan,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
