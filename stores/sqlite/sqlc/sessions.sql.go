// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package sqlc

import (
	"context"
	"time"
)

const createUserSession = `-- name: CreateUserSession :exec
INSERT INTO sessions (sess_id, user_id, expires_at)
VALUES (?1, ?2, ?3)
`

type CreateUserSessionParams struct {
	SessID    string
	UserID    int64
	ExpiresAt time.Time
}

// CreateUserSession creates a new session for the given user id.
func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) error {
	_, err := q.db.ExecContext(ctx, createUserSession, arg.SessID, arg.UserID, arg.ExpiresAt)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE
FROM sessions
WHERE user_id = ?1
`

// DeleteUserSessions deletes all sessions for the given user id.
func (q *Queries) DeleteUserSessions(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userID)
	return err
}

const getSession = `-- name: GetSession :one

SELECT users.user_id,
       users.email,
       users.timezone,
       users.is_active,
       users.is_administrator,
       users.is_operator,
       users.is_user,
       users.clan,
       users.created_at,
       users.updated_at,
       users.last_login,
       sessions.expires_at
FROM sessions
         INNER JOIN users ON sessions.user_id = users.user_id
WHERE sess_id = ?1
  AND users.is_active = 1
`

type GetSessionRow struct {
	UserID          int64
	Email           string
	Timezone        string
	IsActive        int64
	IsAdministrator int64
	IsOperator      int64
	IsUser          int64
	Clan            string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	LastLogin       time.Time
	ExpiresAt       time.Time
}

//	Copyright (c) 2024 Michael D Henderson. All rights reserved.
//
// GetSession returns the session with the given id.
// Fails if the session does not exist or user is not active.
func (q *Queries) GetSession(ctx context.Context, sessionID string) (GetSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionID)
	var i GetSessionRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Timezone,
		&i.IsActive,
		&i.IsAdministrator,
		&i.IsOperator,
		&i.IsUser,
		&i.Clan,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.ExpiresAt,
	)
	return i, err
}
