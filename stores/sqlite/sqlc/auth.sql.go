// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package sqlc

import (
	"context"
	"time"
)

const authenticateUser = `-- name: AuthenticateUser :one
SELECT user_id
FROM users
WHERE is_active = 1
  AND email = ?1
  AND hashed_password = ?2
`

type AuthenticateUserParams struct {
	Email          string
	HashedPassword string
}

// AuthenticateUser authenticates a user with the given email address and password.
// Returns the user's id if the authentication is successful.
// Authentication will fail if the user is not active.
func (q *Queries) AuthenticateUser(ctx context.Context, arg AuthenticateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, authenticateUser, arg.Email, arg.HashedPassword)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (email, timezone, is_active, is_user, hashed_password, magic_link, clan, last_login)
VALUES (?1, ?2, ?3, 1, ?4, ?5, ?6, ?7)
RETURNING user_id
`

type CreateUserParams struct {
	Email          string
	Timezone       string
	IsActive       int64
	HashedPassword string
	MagicLink      string
	Clan           string
	LastLogin      time.Time
}

//	Copyright (c) 2024 Michael D Henderson. All rights reserved.
//
// CreateUser creates a new user and returns its id.
// The email must be lowercase and unique.
// Timezone is the user's timezone. Use UTC if unknown.
// The password is stored as a bcrypt hash.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Timezone,
		arg.IsActive,
		arg.HashedPassword,
		arg.MagicLink,
		arg.Clan,
		arg.LastLogin,
	)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET is_active       = 0,
    hashed_password = 'deleted',
    updated_at      = CURRENT_TIMESTAMP
WHERE user_id = ?1
`

// DeleteUser updates the user with the given id to inactive.
// We do not delete the user because we want to keep the history of the user.
// We also update the user's password and role to "deleted" to prevent them from logging in.
func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const deleteUserByClan = `-- name: DeleteUserByClan :exec
UPDATE users
SET is_active       = 0,
    hashed_password = 'deleted',
    updated_at      = CURRENT_TIMESTAMP
WHERE clan = ?1
`

// DeleteUserByClan updates the user with the given clan to inactive.
// We do not delete the user because we want to keep the history of the user.
// We also update the user's password and role to "deleted" to prevent them from logging in.
func (q *Queries) DeleteUserByClan(ctx context.Context, clan string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByClan, clan)
	return err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
UPDATE users
SET is_active       = 0,
    hashed_password = 'deleted',
    updated_at      = CURRENT_TIMESTAMP
WHERE email = ?1
`

// DeleteUserByEmail updates the user with the given email address to inactive.
// We do not delete the user because we want to keep the history of the user.
// We also update the user's password and role to "deleted" to prevent them from logging in.
func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByEmail, email)
	return err
}

const getUser = `-- name: GetUser :one
SELECT email,
       timezone,
       is_active,
       is_administrator,
       is_operator,
       is_user,
       clan,
       created_at,
       updated_at,
       last_login
FROM users
WHERE is_active = 1
  AND user_id = ?1
`

type GetUserRow struct {
	Email           string
	Timezone        string
	IsActive        int64
	IsAdministrator int64
	IsOperator      int64
	IsUser          int64
	Clan            string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	LastLogin       time.Time
}

// GetUser returns the user with the given id.
// Fails if the user is not active.
func (q *Queries) GetUser(ctx context.Context, userID int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.Email,
		&i.Timezone,
		&i.IsActive,
		&i.IsAdministrator,
		&i.IsOperator,
		&i.IsUser,
		&i.Clan,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByClanAndMagicLink = `-- name: GetUserByClanAndMagicLink :one
SELECT user_id,
       email,
       timezone,
       is_active,
       is_administrator,
       is_operator,
       is_user,
       clan,
       created_at,
       updated_at,
       last_login
FROM users
WHERE is_active = 1
  AND is_administrator = 0
  AND clan = ?1
  AND magic_link = ?2
`

type GetUserByClanAndMagicLinkParams struct {
	ClanID    string
	MagicLink string
}

type GetUserByClanAndMagicLinkRow struct {
	UserID          int64
	Email           string
	Timezone        string
	IsActive        int64
	IsAdministrator int64
	IsOperator      int64
	IsUser          int64
	Clan            string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	LastLogin       time.Time
}

// GetUserByClanAndMagicLink returns the user with the given clan and magic link.
// Fails if the user is not active or is an administrator.
func (q *Queries) GetUserByClanAndMagicLink(ctx context.Context, arg GetUserByClanAndMagicLinkParams) (GetUserByClanAndMagicLinkRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByClanAndMagicLink, arg.ClanID, arg.MagicLink)
	var i GetUserByClanAndMagicLinkRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Timezone,
		&i.IsActive,
		&i.IsAdministrator,
		&i.IsOperator,
		&i.IsUser,
		&i.Clan,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, hashed_password
FROM users
WHERE is_active = 1
  AND email = ?1
`

type GetUserByEmailRow struct {
	UserID         int64
	HashedPassword string
}

// GetUserByEmail returns the user id and hashed password for the given email address.
// Fails if the user is not active.
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.UserID, &i.HashedPassword)
	return i, err
}

const getUserHashedPassword = `-- name: GetUserHashedPassword :one
SELECT hashed_password, magic_link
FROM users
WHERE user_id = ?1
`

type GetUserHashedPasswordRow struct {
	HashedPassword string
	MagicLink      string
}

// GetUserSecrets returns the hashed password and magic link for user with the given id.
func (q *Queries) GetUserHashedPassword(ctx context.Context, userID int64) (GetUserHashedPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUserHashedPassword, userID)
	var i GetUserHashedPasswordRow
	err := row.Scan(&i.HashedPassword, &i.MagicLink)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :one
SELECT is_active, is_administrator, is_operator, is_user
FROM users
WHERE user_id = ?1
`

type GetUserRolesRow struct {
	IsActive        int64
	IsAdministrator int64
	IsOperator      int64
	IsUser          int64
}

// GetUserRoles returns the roles for user with the given id.
func (q *Queries) GetUserRoles(ctx context.Context, userID int64) (GetUserRolesRow, error) {
	row := q.db.QueryRowContext(ctx, getUserRoles, userID)
	var i GetUserRolesRow
	err := row.Scan(
		&i.IsActive,
		&i.IsAdministrator,
		&i.IsOperator,
		&i.IsUser,
	)
	return i, err
}

const setUserRoles = `-- name: SetUserRoles :exec
UPDATE users
SET is_active        = ?1,
    is_administrator = ?2,
    is_operator      = ?3,
    is_user          = ?4
WHERE users.user_id = ?5
`

type SetUserRolesParams struct {
	IsActive        int64
	IsAdministrator int64
	IsOperator      int64
	IsUser          int64
	UserID          int64
}

// SetUserRoles sets the roles for the given user.
func (q *Queries) SetUserRoles(ctx context.Context, arg SetUserRolesParams) error {
	_, err := q.db.ExecContext(ctx, setUserRoles,
		arg.IsActive,
		arg.IsAdministrator,
		arg.IsOperator,
		arg.IsUser,
		arg.UserID,
	)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET last_login = CURRENT_TIMESTAMP
WHERE user_id = ?1
`

// UpdateUserLastLogin updates the last login time for the given user.
func (q *Queries) UpdateUserLastLogin(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, updateUserLastLogin, userID)
	return err
}

const updateUserMagicLink = `-- name: UpdateUserMagicLink :exec
UPDATE users
SET magic_link = ?1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?2
`

type UpdateUserMagicLinkParams struct {
	MagicLink string
	UserID    int64
}

// UpdateUserMagicLink updates the magic link and is_active flag for the given user.
func (q *Queries) UpdateUserMagicLink(ctx context.Context, arg UpdateUserMagicLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateUserMagicLink, arg.MagicLink, arg.UserID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET hashed_password = ?1,
    is_active       = ?2,
    updated_at      = CURRENT_TIMESTAMP
WHERE is_active = 1
  AND user_id = ?3
`

type UpdateUserPasswordParams struct {
	HashedPassword string
	IsActive       int64
	UserID         int64
}

// UpdateUserPassword updates the password and is_active flag for the given user.
// Fails if the user is not active.
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.HashedPassword, arg.IsActive, arg.UserID)
	return err
}

const updateUserTimezone = `-- name: UpdateUserTimezone :exec
UPDATE users
SET timezone   = ?1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?2
`

type UpdateUserTimezoneParams struct {
	Timezone string
	UserID   int64
}

// UpdateUserTimezone updates the timezone for the given user.
func (q *Queries) UpdateUserTimezone(ctx context.Context, arg UpdateUserTimezoneParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTimezone, arg.Timezone, arg.UserID)
	return err
}
